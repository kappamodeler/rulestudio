com.plectix.simulator.SimulationMain -> com.SM:
    boolean loggingInitialized -> Code
    com.plectix.simulator.util.io.PlxLogger LOGGER -> Code
    java.io.PrintStream DEFAULT_OUTPUT_STREAM -> Code
    29:55:void main(java.lang.String[]) -> main
    17:17:com.plectix.simulator.util.io.PlxLogger access$000() -> Code
com.plectix.simulator.SimulationMain$1 -> com.y:
    44:51:void finished(com.plectix.simulator.controller.SimulatorCallable) -> Code
com.plectix.simulator.api.CommandLineRunner -> com.CLR:
    14:19:com.plectix.simulator.controller.SimulatorFutureTask getSimulatorFutureTask(java.lang.String[]) -> gSFT
com.plectix.simulator.controller.SimulationService -> com.SS:
    int DEFAULT_NUMBER_OF_THREADS -> Code
    java.util.concurrent.ExecutorService EXECUTOR_SERVICE -> Code
    com.plectix.simulator.controller.SimulatorFactoryInterface simulatorFactory -> Code
    java.util.concurrent.ConcurrentHashMap callablesMap -> Code
    70:76:long submit(com.plectix.simulator.controller.SimulatorInputData,com.plectix.simulator.controller.SimulatorCallableListener) -> sM
    131:136:com.plectix.simulator.controller.SimulatorStatusInterface getSimulatorStatus(long) -> getSimulatorStatus
    147:152:com.plectix.simulator.streaming.LiveData getSimulatorLiveData(long) -> gSLD
    179:187:boolean cancel(long,boolean,boolean) -> c
    232:233:void shutdown() -> sD
com.plectix.simulator.controller.SimulatorCallable -> com.K:
    java.util.concurrent.atomic.AtomicLong SIMULATOR_CALLABLE_COUNT -> Code
    long id -> Code
    com.plectix.simulator.controller.SimulatorInterface simulator -> Code
    com.plectix.simulator.controller.SimulatorCallableListener listener -> Code
    com.plectix.simulator.controller.SimulatorInputData simulatorInputData -> Code
    44:65:com.plectix.simulator.controller.SimulatorResultsData call() -> Code
    76:76:long getId() -> Code
    80:80:com.plectix.simulator.controller.SimulatorInterface getSimulator() -> Code
    88:88:com.plectix.simulator.controller.SimulatorCallableExitReport getSimulatorExitReport() -> Code
    11:11:java.lang.Object call() -> call
com.plectix.simulator.controller.SimulatorCallableExitReport -> com.SCER:
    java.lang.Exception exception -> Code
    69:69:java.lang.Exception getException() -> getE
    73:74:void setException(java.lang.Exception) -> Code
com.plectix.simulator.controller.SimulatorCallableListener -> com.LpT9:
    void finished(com.plectix.simulator.controller.SimulatorCallable) -> Code
com.plectix.simulator.controller.SimulatorFactoryInterface -> com.cOm3:
    com.plectix.simulator.controller.SimulatorInterface createSimulator() -> cS
com.plectix.simulator.controller.SimulatorFutureTask -> com.SFT:
    com.plectix.simulator.controller.SimulatorCallable simulatorCallable -> Code
    20:20:com.plectix.simulator.controller.SimulatorInterface getSimulator() -> Code
com.plectix.simulator.controller.SimulatorInputData -> com.SID:
    com.plectix.simulator.simulator.SimulationArguments simulationArguments -> Code
    java.io.PrintStream printStream -> Code
    24:24:java.io.PrintStream getPrintStream() -> Code
    28:28:com.plectix.simulator.simulator.SimulationArguments getSimulationArguments() -> Code
com.plectix.simulator.controller.SimulatorInterface -> com.AUx:
    void run(com.plectix.simulator.controller.SimulatorInputData) -> Code
    com.plectix.simulator.controller.SimulatorStatusInterface getStatus() -> Code
    com.plectix.simulator.streaming.LiveData getLiveData() -> Code
    com.plectix.simulator.controller.SimulatorResultsData getSimulatorResultsData() -> Code
    void cleanUpAfterException(java.lang.Exception) -> Code
com.plectix.simulator.controller.SimulatorResultsData -> com.SRD:
    boolean isCancelled -> Code
    com.plectix.simulator.controller.SimulatorCallableExitReport simulatorCallableExitReport -> Code
    47:47:com.plectix.simulator.controller.SimulatorCallableExitReport getSimulatorExitReport() -> getSER
    56:56:boolean isCancelled() -> Code
    60:61:void setCancelled$1385ff() -> Code
com.plectix.simulator.controller.SimulatorStatusInterface -> com.SSI:
    java.lang.String getStatusMessage() -> gSM
    double getProgress() -> gP
com.plectix.simulator.gui.lib.GradientPanelUI -> com.plectix.simulator.gui.lib.GradientPanelUI:
    26:46:void paint(java.awt.Graphics,javax.swing.JComponent) -> paint
com.plectix.simulator.interfaces.ObservableConnectedComponentInterface -> com.Lpt5:
    int getMainAutomorphismNumber() -> V
    void setMainAutomorphismNumber(int) -> Code
    void addAutomorphicObservables(int) -> V
com.plectix.simulator.interfaces.ObservableInterface -> com.coM1:
    void fixState$1385ff() -> V
    java.lang.String getName() -> V
    java.lang.String getLine() -> Code
    int getId() -> Code
    double getCurrentState(com.plectix.simulator.staticanalysis.Observables) -> Code
    java.lang.String getStringItem(int,com.plectix.simulator.staticanalysis.Observables) -> Code
    double getItem(int,com.plectix.simulator.staticanalysis.Observables) -> Code
    void updateLastValue() -> a_
    double getLastValue() -> Code
    boolean isUnique() -> a_
com.plectix.simulator.interfaces.ObservableRuleInterface -> com.com1:
    com.plectix.simulator.staticanalysis.Rule rule -> Code
    int idAsObservable -> Code
    java.util.List stateHistory -> Code
    double lastState -> Code
    38:39:void updateLastValue() -> a_
    58:62:void fixState$1385ff() -> V
    65:65:java.lang.String getLine() -> Code
    69:69:java.lang.String getName() -> V
    73:73:int getId() -> Code
    77:77:double getCurrentState(com.plectix.simulator.staticanalysis.Observables) -> Code
    81:81:java.lang.String getStringItem(int,com.plectix.simulator.staticanalysis.Observables) -> Code
    85:85:boolean isUnique() -> a_
    89:89:double getItem(int,com.plectix.simulator.staticanalysis.Observables) -> Code
    94:94:double getLastValue() -> Code
com.plectix.simulator.interfaces.RandomInterface -> com.lPt4:
    double getDouble() -> Code
    int getInteger(int) -> Code
    void setSeed(long) -> Code
com.plectix.simulator.interfaces.SolutionElementInterface -> com.COm6:
    java.util.List getAgents() -> V
    void removeInjection(com.plectix.simulator.simulationclasses.injections.Injection) -> Code
    void addAgentFromSolutionForRHS(com.plectix.simulator.staticanalysis.Agent) -> Code
    boolean isAutomorphicTo(com.plectix.simulator.staticanalysis.Agent) -> Code
    void initSpanningTreeMap() -> b_
    com.plectix.simulator.simulationclasses.injections.Injection getRandomInjection() -> Code
    void clearAgentsFromSolutionForRHS() -> Code
    com.plectix.simulator.simulationclasses.injections.Injection createInjection(com.plectix.simulator.staticanalysis.Agent) -> Code
    void doPositiveUpdate(java.util.List) -> Code
    void setInjection(com.plectix.simulator.simulationclasses.injections.Injection) -> V
    java.util.List getAgentFromSolutionForRHS() -> Code
    java.util.List getAgentsSortedByIdInRule() -> I
    void setSuperSubstance(com.plectix.simulator.simulationclasses.solution.SuperSubstance) -> Code
    com.plectix.simulator.simulationclasses.solution.SuperSubstance getSubstance() -> Code
    boolean isEmpty() -> Code
    java.lang.String getSmilesString() -> a_
    long getInjectionsWeight() -> Code
    void deleteIncomingInjections() -> B
    void burnIncomingInjections() -> I
    void incrementIncomingInjections() -> Z
    void updateInjection(com.plectix.simulator.simulationclasses.injections.Injection,long) -> Code
com.plectix.simulator.interfaces.SolutionInterface -> com.aP:
    void clear() -> Code
    void clearSolutionLines() -> V
    void checkSolutionLinesAndAdd(java.lang.String,long) -> Code
    java.util.List getSolutionLines() -> Code
    com.plectix.simulator.simulationclasses.solution.SolutionFactory getKappaSystem$7ae87116() -> Code
    com.plectix.simulator.simulationclasses.solution.RuleApplicationPoolInterface prepareRuleApplicationPool() -> Code
    void addInjectionToPool(com.plectix.simulator.simulationclasses.solution.RuleApplicationPoolInterface,com.plectix.simulator.simulationclasses.injections.Injection) -> Code
    void flushPoolContent(com.plectix.simulator.simulationclasses.solution.RuleApplicationPoolInterface) -> Code
    com.plectix.simulator.interfaces.SolutionElementInterface cloneConnectedComponent$1e5ed741(com.plectix.simulator.interfaces.SolutionElementInterface) -> Code
    com.plectix.simulator.simulationclasses.solution.StraightStorage getStraightStorage() -> Code
    com.plectix.simulator.simulationclasses.solution.SuperStorage getSuperStorage() -> Code
    void addInitialConnectedComponents(long,java.util.List) -> Code
com.plectix.simulator.io.ConsoleOutputManager -> com.lPt1:
    java.io.PrintStream printStream -> Code
    com.plectix.simulator.simulator.SimulationData simulationData -> Code
    31:31:boolean initialized() -> Code
    35:38:void print(java.lang.String) -> Code
    41:44:void println() -> I
    47:49:void println(java.lang.String) -> V
    52:56:void outputBar() -> Code
    59:60:void setPrintStream(java.io.PrintStream) -> Code
    63:66:void outputData() -> V
    69:77:void outputSolution() -> Z
    199:205:void outputPertubation() -> B
    208:208:java.io.PrintStream getPrintStream() -> Code
    211:213:void addAdditionalInfo(com.plectix.simulator.util.Info$InfoType,java.lang.String) -> Code
com.plectix.simulator.io.ConsoleOutputManager$1 -> com.lPt1$1:
    int[] $SwitchMap$com$plectix$simulator$simulationclasses$action$ActionType -> Code
com.plectix.simulator.io.SimulationDataReader -> com.Com8:
    com.plectix.simulator.simulator.SimulationData simulationData -> Code
    29:71:void readSimulationFile$33f7c2f4() -> Code
com.plectix.simulator.io.xml.ContactMapXMLWriter -> com.cOM7:
    com.plectix.simulator.staticanalysis.contactmap.ContactMap contactMap -> Code
    25:99:void write(com.plectix.simulator.io.xml.OurXMLWriter) -> Code
    103:129:void addSiteToContactMapAgent(com.plectix.simulator.staticanalysis.contactmap.ContactMapChangedSite,com.plectix.simulator.io.xml.OurXMLWriter) -> Code
com.plectix.simulator.io.xml.InfluenceMapXMLWriter -> com.T:
    com.plectix.simulator.staticanalysis.influencemap.InfluenceMap influenceMap -> Code
    28:76:void write$122d5ef1(com.plectix.simulator.io.xml.OurXMLWriter,int,java.util.List,boolean,com.plectix.simulator.simulationclasses.solution.SolutionFactory,boolean) -> Code
    82:104:void printMap(com.plectix.simulator.io.xml.OurXMLWriter,java.lang.String,com.plectix.simulator.staticanalysis.Rule,java.util.List,java.util.List,int) -> Code
    109:131:void addRulesToXML$4ce72dc7(int,com.plectix.simulator.io.xml.OurXMLWriter,int,boolean,com.plectix.simulator.simulationclasses.solution.SolutionFactory,boolean) -> Code
com.plectix.simulator.io.xml.LocalViewsXMLWriter -> com.LpT1:
    com.plectix.simulator.staticanalysis.localviews.LocalViewsMain localViews -> Code
    20:37:void write(com.plectix.simulator.io.xml.OurXMLWriter) -> Code
com.plectix.simulator.io.xml.OurXMLWriter -> com.an:
    javax.xml.stream.XMLStreamWriter writer -> Code
    int tabCounter -> Code
    26:27:void writeStartDocument() -> Code
    30:33:void writeStartElement(java.lang.String) -> Code
    36:41:void writeTabs() -> B
    44:47:void writeEndElement() -> V
    51:52:void writeNamespace(java.lang.String,java.lang.String) -> Code
    56:57:void writeDefaultNamespace(java.lang.String) -> V
    60:61:void setDefaultNamespace(java.lang.String) -> I
    65:66:void writeAttribute(java.lang.String,java.lang.String) -> V
    69:70:void writeCData(java.lang.String) -> Z
    73:74:void writeEndDocument() -> I
    77:78:void flush() -> Z
com.plectix.simulator.io.xml.RuleCompressionXMLWriter -> com.cOm4:
    java.util.Map initialRulesMap -> Code
    com.plectix.simulator.staticanalysis.subviews.MainSubViews qualitativeSubViews -> Code
    java.util.Map associationQualitativeMap -> V
    java.util.Set qualitativeRules -> Code
    java.util.Map associationQualitativeBackMap -> I
    com.plectix.simulator.staticanalysis.rulecompression.CompressionResults results -> Code
    54:61:void writeToXML(com.plectix.simulator.io.xml.OurXMLWriter,boolean) -> Code
    84:93:void writeToXMLAssociationQualitativeMap(com.plectix.simulator.io.xml.OurXMLWriter) -> Code
    98:128:void writeToXMLQualitativeRules(com.plectix.simulator.io.xml.OurXMLWriter,boolean) -> V
    5:13:java.lang.String[] normalize(java.lang.String[]) -> Code
    17:25:java.lang.String getCommandLineString(java.lang.String[]) -> Code
com.plectix.simulator.io.xml.SimulationDataXMLWriter -> com.aq:
    com.plectix.simulator.simulator.SimulationData simulationData -> Code
    53:62:void writeRulesToXML(com.plectix.simulator.io.xml.OurXMLWriter) -> Code
    67:198:void createXMLOutput(java.io.Writer) -> Code
    202:216:void writeSnapshotsToXML(com.plectix.simulator.io.xml.OurXMLWriter) -> V
    220:230:void appendInfo(com.plectix.simulator.io.xml.OurXMLWriter) -> I
    252:253:void outputXMLData() -> Code
    272:291:java.lang.StringBuffer appendData(com.plectix.simulator.staticanalysis.Observables,java.util.List,int) -> Code
    296:308:java.lang.String getItem(com.plectix.simulator.staticanalysis.Observables,int,com.plectix.simulator.interfaces.ObservableInterface) -> Code
com.plectix.simulator.io.xml.SpeciesXMLWriter -> com.ar:
    com.plectix.simulator.staticanalysis.speciesenumeration.SpeciesEnumeration species -> Code
    16:37:void write(com.plectix.simulator.io.xml.OurXMLWriter) -> Code
com.plectix.simulator.io.xml.StoriesXMLWriter -> com.z:
    com.plectix.simulator.staticanalysis.stories.Stories stories -> Code
    31:61:void write$333b94de$543bb6c5(com.plectix.simulator.io.xml.OurXMLWriter,com.plectix.simulator.simulationclasses.solution.SolutionFactory) -> Code
    66:77:void addConnections2(com.plectix.simulator.staticanalysis.stories.graphs.StoriesGraphs,com.plectix.simulator.io.xml.OurXMLWriter) -> Code
    81:95:void addIntros(com.plectix.simulator.staticanalysis.stories.graphs.StoriesGraphs,com.plectix.simulator.io.xml.OurXMLWriter) -> V
com.plectix.simulator.io.xml.SubviewsXMLWriter -> com.coM8:
    com.plectix.simulator.staticanalysis.subviews.AllSubViewsOfAllAgentsInterface subViewsInstance -> Code
    20:52:void write(com.plectix.simulator.io.xml.OurXMLWriter) -> Code
com.plectix.simulator.parser.EasyReader -> com.ae:
    java.io.BufferedReader bufferedReader -> Code
    java.lang.String filePath -> Code
    38:40:java.lang.String getLine() -> Code
    46:51:void close() -> Code
com.plectix.simulator.parser.FileReadingException -> com.cOM5:
com.plectix.simulator.parser.IncompletesDisabledException -> com.t:
com.plectix.simulator.parser.KappaFile -> com.aN:
    com.plectix.simulator.parser.KappaFileParagraph rulesParagraph -> Code
    com.plectix.simulator.parser.KappaFileParagraph observablesParagraph -> V
    com.plectix.simulator.parser.KappaFileParagraph storiesParagraph -> I
    com.plectix.simulator.parser.KappaFileParagraph solutionParagraph -> Z
    com.plectix.simulator.parser.KappaFileParagraph perturbationsParagraph -> B
    17:17:boolean containsNoRules() -> Code
    23:24:void addRuleLine(com.plectix.simulator.parser.KappaFileLine) -> Code
    27:28:void addObservableLine(com.plectix.simulator.parser.KappaFileLine) -> V
    31:32:void addStoryLine(com.plectix.simulator.parser.KappaFileLine) -> I
    35:36:void addInitialSolutionLine(com.plectix.simulator.parser.KappaFileLine) -> Z
    39:40:void addPerturbationLine(com.plectix.simulator.parser.KappaFileLine) -> B
    45:45:com.plectix.simulator.parser.KappaFileParagraph getRules() -> Code
    49:49:com.plectix.simulator.parser.KappaFileParagraph getObservables() -> V
    53:53:com.plectix.simulator.parser.KappaFileParagraph getStories() -> I
    57:57:com.plectix.simulator.parser.KappaFileParagraph getSolution() -> Z
    61:61:com.plectix.simulator.parser.KappaFileParagraph getPerturbations() -> B
com.plectix.simulator.parser.KappaFileLine -> com.cOM6:
    int lineNumber -> Code
    java.lang.String line -> Code
    22:22:java.lang.String getLine() -> Code
    27:27:java.lang.String toString() -> toString
com.plectix.simulator.parser.KappaFileParagraph -> com.lpT6:
    java.util.Collection paragraphLines -> Code
    10:11:void addLine(com.plectix.simulator.parser.KappaFileLine) -> Code
    14:14:boolean isEmpty() -> Code
    18:18:java.util.Collection getLines() -> Code
com.plectix.simulator.parser.KappaFileReader -> com.Y:
    11:11:java.lang.Object unsafeParse() -> Code
com.plectix.simulator.parser.KappaParagraphModifier -> com.lpt5:
    com.plectix.simulator.parser.KappaParagraphModifier INITIAL_CONDITIONS_PREFIX -> Code
    com.plectix.simulator.parser.KappaParagraphModifier SIMULATION_PREFIX -> V
    com.plectix.simulator.parser.KappaParagraphModifier STORIFY_PREFIX -> I
    com.plectix.simulator.parser.KappaParagraphModifier MOD_PREFIX -> Z
    java.lang.String modifier -> Code
    com.plectix.simulator.parser.KappaParagraphModifier[] $VALUES -> Code
    8:8:com.plectix.simulator.parser.KappaParagraphModifier[] values() -> values
    8:8:com.plectix.simulator.parser.KappaParagraphModifier valueOf(java.lang.String) -> valueOf
    21:21:java.lang.String getString() -> Code
    25:32:com.plectix.simulator.parser.KappaParagraphModifier getValue(java.lang.String) -> Code
com.plectix.simulator.parser.KappaSystemParser -> com.lPt5:
    com.plectix.simulator.parser.KappaFile kappaFile -> Code
    com.plectix.simulator.simulator.SimulationData simulationData -> Code
    32:36:void parse$33f7c2f4() -> Code
com.plectix.simulator.parser.ParseErrorException -> com.LPt6:
com.plectix.simulator.parser.ParseErrorMessage -> com.P:
    com.plectix.simulator.parser.ParseErrorMessage BAD_RESCALE -> Code
    com.plectix.simulator.parser.ParseErrorMessage UNEXPECTED_AGENT_NAME -> V
    com.plectix.simulator.parser.ParseErrorMessage UNEXPECTED_SITE_NAME -> I
    com.plectix.simulator.parser.ParseErrorMessage UNEXPECTED_INTERNAL_STATE -> Z
    com.plectix.simulator.parser.ParseErrorMessage BAD_CONNECTIONS_COORDINATION -> B
    com.plectix.simulator.parser.ParseErrorMessage CONNECTION_SYMBOL_EXPECTED -> C
    com.plectix.simulator.parser.ParseErrorMessage UNEXPECTED_RULE_NAME -> S
    com.plectix.simulator.parser.ParseErrorMessage UNEXPECTED_RULE_RATE -> F
    com.plectix.simulator.parser.ParseErrorMessage ARROW_EXPECTED -> D
    com.plectix.simulator.parser.ParseErrorMessage NO_SUCH_RULE -> L
    com.plectix.simulator.parser.ParseErrorMessage $INF_USED_WITH_$ADDONCE -> a
    com.plectix.simulator.parser.ParseErrorMessage ONCE_QUANTITY_FORMAT -> b
    com.plectix.simulator.parser.ParseErrorMessage $ADDONCE_OR_$DELETEONCE -> c
    com.plectix.simulator.parser.ParseErrorMessage MODIFICATION_EXPECTED -> d
    com.plectix.simulator.parser.ParseErrorMessage DO_EXPECTED -> e
    com.plectix.simulator.parser.ParseErrorMessage WRONG_TIME_PERTURBATION_SYNTAX -> f
    com.plectix.simulator.parser.ParseErrorMessage WRONG_TIME_BOUNDARY -> g
    com.plectix.simulator.parser.ParseErrorMessage INTEGER_EXPECTED -> h
    com.plectix.simulator.parser.ParseErrorMessage UNEXPECTED_LINE -> i
    com.plectix.simulator.parser.ParseErrorMessage BAD_LINEAR_EXPRESSION -> j
    com.plectix.simulator.parser.ParseErrorMessage SENSE_OF_INEQUALITY_EXPECTED -> k
    com.plectix.simulator.parser.ParseErrorMessage INCOMPLETES_DISABLED -> l
    com.plectix.simulator.parser.ParseErrorMessage INCOMPLETE_SUBSTANCE -> m
    com.plectix.simulator.parser.ParseErrorMessage REPEATED_SITE_NAME -> n
    com.plectix.simulator.parser.ParseErrorMessage STAR_IN_SITE_NAME -> p
    com.plectix.simulator.parser.ParseErrorMessage AGENT_CONNECTED_WITH_HIMSELF -> o
    java.lang.String message -> Code
    com.plectix.simulator.parser.ParseErrorMessage[] $VALUES -> Code
    9:9:com.plectix.simulator.parser.ParseErrorMessage[] values() -> values
    9:9:com.plectix.simulator.parser.ParseErrorMessage valueOf(java.lang.String) -> valueOf
    54:54:java.lang.String getMessage() -> Code
com.plectix.simulator.parser.Parser -> com.lpt9:
    com.plectix.simulator.parser.EasyReader easyReader -> Code
    22:22:com.plectix.simulator.parser.EasyReader getReader() -> Code
    java.lang.Object unsafeParse() -> Code
    35:37:java.lang.Object parse() -> V
com.plectix.simulator.parser.SimulationDataFormatException -> com.lpT3:
    java.lang.String lineDetails -> Code
    45:48:void setLineDescription(com.plectix.simulator.parser.KappaFileLine) -> Code
    56:59:java.lang.String getMessage() -> getMessage
com.plectix.simulator.parser.abstractmodel.KappaModel -> com.Com2:
    java.util.List perturbations -> Code
    com.plectix.simulator.parser.abstractmodel.observables.ModelObservables observables -> Code
    com.plectix.simulator.parser.abstractmodel.ModelSolution solution -> Code
    com.plectix.simulator.parser.abstractmodel.ModelStories stories -> Code
    java.util.Collection rules -> Code
    29:29:com.plectix.simulator.parser.abstractmodel.observables.ModelObservables getObservables() -> Code
    33:33:java.util.Collection getRules() -> Code
    37:37:com.plectix.simulator.parser.abstractmodel.ModelSolution getSolution() -> Code
    41:42:void setSolution(com.plectix.simulator.parser.abstractmodel.ModelSolution) -> Code
    45:46:void setStories(com.plectix.simulator.parser.abstractmodel.ModelStories) -> Code
    49:50:void setRules(java.util.Collection) -> Code
    57:57:com.plectix.simulator.parser.abstractmodel.ModelStories getStories() -> Code
    61:62:void setObservables(com.plectix.simulator.parser.abstractmodel.observables.ModelObservables) -> Code
    65:66:void setPerturbations(java.util.List) -> Code
    69:69:java.util.List getPerturbations() -> Code
    74:84:java.lang.String toString() -> toString
com.plectix.simulator.parser.abstractmodel.ModelAgent -> com.AuX:
    java.util.List sites -> Code
    java.lang.String name -> Code
    26:26:java.util.List getSites() -> Code
    61:74:java.lang.String toString() -> toString
    79:79:java.lang.String getDefaultName() -> Code
    84:84:java.lang.String getName() -> V
    88:96:void addCorrectSite(com.plectix.simulator.parser.abstractmodel.ModelSite) -> Code
    12:12:int compareTo(java.lang.Object) -> compareTo
com.plectix.simulator.parser.abstractmodel.ModelAgent$ComparableSite -> com.AuX$aux:
    com.plectix.simulator.parser.abstractmodel.ModelSite site -> Code
    55:55:java.lang.String toString() -> toString
    37:37:int compareTo(java.lang.Object) -> compareTo
com.plectix.simulator.parser.abstractmodel.ModelLink -> com.e:
    com.plectix.simulator.staticanalysis.LinkStatus linkStatus -> Code
    com.plectix.simulator.parser.abstractmodel.ModelSite linkedSite -> Code
    15:16:void setStatusLink(com.plectix.simulator.staticanalysis.LinkStatus) -> Code
    19:19:com.plectix.simulator.staticanalysis.LinkStatus getStatusLink() -> Code
    23:26:void setSite(com.plectix.simulator.parser.abstractmodel.ModelSite) -> Code
    29:38:com.plectix.simulator.staticanalysis.LinkRank getStatusLinkRank() -> Code
com.plectix.simulator.parser.abstractmodel.ModelLink$1 -> com.e$1:
    int[] $SwitchMap$com$plectix$simulator$staticanalysis$LinkStatus -> Code
com.plectix.simulator.parser.abstractmodel.ModelPerturbation -> com.NuL:
    com.plectix.simulator.parser.abstractmodel.perturbations.conditions.PerturbationCondition condition -> Code
    com.plectix.simulator.parser.abstractmodel.perturbations.modifications.PerturbationModification modification -> Code
    18:18:com.plectix.simulator.parser.abstractmodel.perturbations.conditions.PerturbationCondition getCondition() -> Code
    22:22:com.plectix.simulator.parser.abstractmodel.perturbations.modifications.PerturbationModification getModification() -> Code
    31:31:java.lang.String toString() -> toString
com.plectix.simulator.parser.abstractmodel.ModelRule -> com.lpT7:
    java.lang.String name -> Code
    java.util.List leftHandSideAgents -> Code
    java.util.List rightHandSideAgents -> V
    double rate -> Code
    int id -> Code
    boolean isStorify -> Code
    double binaryRate -> V
    31:31:java.lang.String getName() -> Code
    35:35:double getRate() -> Code
    39:39:java.util.List getRHS() -> Code
    43:43:java.util.List getLHS() -> V
    47:47:int getID() -> Code
    51:51:double getBinaryRate() -> V
    55:55:boolean isStorify() -> Code
    60:71:java.lang.String toString() -> toString
com.plectix.simulator.parser.abstractmodel.ModelSite -> com.as:
    com.plectix.simulator.parser.abstractmodel.ModelLink linkState -> Code
    java.lang.String name -> Code
    int linkIndex -> Code
    java.lang.String internalStateName -> V
    20:20:java.lang.String getName() -> Code
    24:25:void setInternalState(java.lang.String) -> Code
    28:28:com.plectix.simulator.parser.abstractmodel.ModelLink getLinkState() -> Code
    32:33:void setLinkIndex(int) -> Code
    36:36:int getLinkIndex() -> Code
    40:40:java.lang.String getInternalStateName() -> V
    45:57:java.lang.String toString() -> toString
com.plectix.simulator.parser.abstractmodel.ModelSolution -> com.NUL:
    java.util.List solutionLinesData -> Code
    java.util.List solutionLines -> V
    14:18:void addAgents(long,java.util.List) -> Code
    21:21:java.util.List getAgents() -> Code
    25:25:java.util.List getSolutionLines() -> V
    29:41:void checkSolutionLinesAndAdd(java.lang.String,long) -> Code
    45:49:java.lang.String toString() -> toString
com.plectix.simulator.parser.abstractmodel.ModelStories -> com.aB:
    java.util.List storiesObjectsNames -> Code
    11:12:void addName(java.lang.String) -> Code
    15:15:java.util.List getStorifiedNames() -> Code
    20:25:java.lang.String toString() -> toString
com.plectix.simulator.parser.abstractmodel.SolutionLineData -> com.pRn:
    java.util.List agents -> Code
    long counter -> Code
    18:18:java.util.List getAgents() -> Code
    22:22:long getCount() -> Code
    27:31:java.lang.String toString() -> toString
com.plectix.simulator.parser.abstractmodel.observables.ModelObservables -> com.r:
    java.util.List componentObservables -> Code
    java.util.List ruleObservables -> V
    16:17:void addComponent(java.util.List,java.lang.String,java.lang.String,int) -> Code
    20:21:void addRuleName(java.lang.String,int,com.plectix.simulator.parser.KappaFileLine) -> Code
    24:24:java.util.List getRuleNames() -> Code
    28:28:java.util.List getComponents() -> V
    33:40:java.lang.String toString() -> toString
com.plectix.simulator.parser.abstractmodel.observables.ObservableComponentLineData -> com.coM9:
    java.util.List agents -> Code
    java.lang.String name -> Code
    java.lang.String line -> V
    22:22:java.lang.String getName() -> Code
    26:26:java.util.List getAgents() -> Code
    30:30:java.lang.String getLine() -> V
    35:41:java.lang.String toString() -> toString
com.plectix.simulator.parser.abstractmodel.observables.ObservableRuleLineData -> com.lpt7:
    java.lang.String ruleName -> Code
    com.plectix.simulator.parser.KappaFileLine observableLine -> Code
    16:16:java.lang.String getRuleName() -> Code
    20:20:com.plectix.simulator.parser.KappaFileLine getKappaFileLine() -> Code
    25:25:java.lang.String toString() -> toString
com.plectix.simulator.parser.abstractmodel.observables.ObservablesLineData -> com.coM4:
    int id -> Code
    11:11:int getId() -> Code
com.plectix.simulator.parser.abstractmodel.perturbations.LinearExpressionMonome -> com.G:
    java.lang.String entityName -> Code
    double coefficient -> Code
    17:17:java.lang.String getEntityName() -> Code
    21:21:double getMultiplier() -> Code
    26:29:java.lang.String toString() -> toString
com.plectix.simulator.parser.abstractmodel.perturbations.ModelLinearExpression -> com.Com5:
    java.util.List monomes -> Code
    13:14:void addMonome(com.plectix.simulator.parser.abstractmodel.perturbations.LinearExpressionMonome) -> Code
    17:17:java.util.List getPolynome() -> Code
    22:22:java.lang.String toString() -> toString
com.plectix.simulator.parser.abstractmodel.perturbations.RateExpressionParser -> com.auX:
    10:12:java.lang.String parseName(java.lang.String,com.plectix.simulator.parser.KappaFileLine) -> Code
com.plectix.simulator.parser.abstractmodel.perturbations.SpeciesExpressionParser -> com.aK:
    10:14:java.lang.String parseName(java.lang.String,com.plectix.simulator.parser.KappaFileLine) -> Code
com.plectix.simulator.parser.abstractmodel.perturbations.SpecifiedLinearModificationParser -> com.LPT3:
    12:24:com.plectix.simulator.parser.abstractmodel.perturbations.ModelLinearExpression parse(java.lang.String,com.plectix.simulator.parser.KappaFileLine) -> Code
    29:64:com.plectix.simulator.parser.abstractmodel.perturbations.LinearExpressionMonome parseMonome(java.lang.String,com.plectix.simulator.parser.KappaFileLine) -> Code
    java.lang.String parseName(java.lang.String,com.plectix.simulator.parser.KappaFileLine) -> Code
com.plectix.simulator.parser.abstractmodel.perturbations.conditions.ConditionType -> com.k:
    com.plectix.simulator.parser.abstractmodel.perturbations.conditions.ConditionType TIME -> Code
    com.plectix.simulator.parser.abstractmodel.perturbations.conditions.ConditionType SPECIES -> V
    com.plectix.simulator.parser.abstractmodel.perturbations.conditions.ConditionType COMPLEX -> I
    com.plectix.simulator.parser.abstractmodel.perturbations.conditions.ConditionType[] $VALUES -> Code
    3:3:com.plectix.simulator.parser.abstractmodel.perturbations.conditions.ConditionType[] values() -> values
    3:3:com.plectix.simulator.parser.abstractmodel.perturbations.conditions.ConditionType valueOf(java.lang.String) -> valueOf
com.plectix.simulator.parser.abstractmodel.perturbations.conditions.ModelConjuctionCondition -> com.aw:
    java.util.Collection conditions -> Code
    14:14:com.plectix.simulator.parser.abstractmodel.perturbations.conditions.ConditionType getType() -> Code
    19:29:java.lang.String toString() -> toString
    33:33:java.util.Collection getConditions() -> Code
com.plectix.simulator.parser.abstractmodel.perturbations.conditions.ModelSpeciesCondition -> com.g:
    com.plectix.simulator.parser.abstractmodel.perturbations.ModelLinearExpression expression -> Code
    java.lang.String argument -> Code
    com.plectix.simulator.util.InequalitySign inequalitySign -> Code
    20:20:com.plectix.simulator.parser.abstractmodel.perturbations.ModelLinearExpression getExpression() -> Code
    24:24:com.plectix.simulator.util.InequalitySign inequalitySign() -> Code
    28:28:java.lang.String getPickedObservableName() -> Code
    33:33:com.plectix.simulator.parser.abstractmodel.perturbations.conditions.ConditionType getType() -> Code
    38:38:java.lang.String toString() -> toString
    42:54:java.lang.String expressionToString(com.plectix.simulator.parser.abstractmodel.perturbations.ModelLinearExpression) -> Code
com.plectix.simulator.parser.abstractmodel.perturbations.conditions.ModelTimeCondition -> com.COM3:
    double timeBoundParameter -> Code
    11:11:double getBounds() -> Code
    16:16:com.plectix.simulator.parser.abstractmodel.perturbations.conditions.ConditionType getType() -> Code
    21:21:java.lang.String toString() -> toString
com.plectix.simulator.parser.abstractmodel.perturbations.conditions.PerturbationCondition -> com.Lpt9:
    com.plectix.simulator.parser.abstractmodel.perturbations.conditions.ConditionType getType() -> Code
com.plectix.simulator.parser.abstractmodel.perturbations.modifications.AbstractOnceModification -> com.cOm5:
    java.util.List substanceAgents -> Code
    int quantity -> Code
    19:19:int getQuantity() -> Code
    23:23:java.util.List getSubstanceAgents() -> Code
    28:28:java.lang.String toString() -> toString
com.plectix.simulator.parser.abstractmodel.perturbations.modifications.ModelAddOnceModification -> com.CoM9:
    14:14:com.plectix.simulator.parser.abstractmodel.perturbations.modifications.ModificationType getType() -> Code
com.plectix.simulator.parser.abstractmodel.perturbations.modifications.ModelDeleteOnceModification -> com.coM6:
    14:14:com.plectix.simulator.parser.abstractmodel.perturbations.modifications.ModificationType getType() -> Code
com.plectix.simulator.parser.abstractmodel.perturbations.modifications.ModelRateModification -> com.H:
    com.plectix.simulator.parser.abstractmodel.perturbations.ModelLinearExpression expression -> Code
    java.lang.String argument -> Code
    15:15:com.plectix.simulator.parser.abstractmodel.perturbations.ModelLinearExpression getExpression() -> Code
    19:19:java.lang.String getArgument() -> Code
    24:24:com.plectix.simulator.parser.abstractmodel.perturbations.modifications.ModificationType getType() -> Code
    29:29:java.lang.String toString() -> toString
com.plectix.simulator.parser.abstractmodel.perturbations.modifications.ModificationType -> com.cOm9:
    com.plectix.simulator.parser.abstractmodel.perturbations.modifications.ModificationType ADDONCE -> Code
    com.plectix.simulator.parser.abstractmodel.perturbations.modifications.ModificationType DELETEONCE -> V
    com.plectix.simulator.parser.abstractmodel.perturbations.modifications.ModificationType RATE -> I
    java.lang.String string -> Code
    com.plectix.simulator.parser.abstractmodel.perturbations.modifications.ModificationType[] $VALUES -> Code
    3:3:com.plectix.simulator.parser.abstractmodel.perturbations.modifications.ModificationType[] values() -> values
    3:3:com.plectix.simulator.parser.abstractmodel.perturbations.modifications.ModificationType valueOf(java.lang.String) -> valueOf
    16:16:java.lang.String toString() -> toString
com.plectix.simulator.parser.abstractmodel.perturbations.modifications.PerturbationModification -> com.CoN:
    com.plectix.simulator.parser.abstractmodel.perturbations.modifications.ModificationType getType() -> Code
com.plectix.simulator.parser.abstractmodel.reader.KappaModelCreator -> com.E:
    com.plectix.simulator.simulator.SimulationArguments simulationArguments -> Code
    com.plectix.simulator.parser.util.AgentFactory defaultAgentFactory -> Code
    com.plectix.simulator.parser.util.AgentFactory solutionAgentFactory -> V
    29:55:com.plectix.simulator.parser.abstractmodel.KappaModel createModel(com.plectix.simulator.parser.KappaFile) -> Code
com.plectix.simulator.parser.abstractmodel.reader.KappaParagraphReader -> com.cOM2:
    com.plectix.simulator.simulator.SimulationArguments simulationArguments -> Code
    com.plectix.simulator.parser.util.AgentFactory agentFactory -> Code
    26:26:java.util.List parseAgents(java.lang.String) -> Code
    30:30:com.plectix.simulator.simulator.SimulationArguments getArguments() -> Code
com.plectix.simulator.parser.abstractmodel.reader.ObservablesParagraphReader -> com.COM6:
    21:48:com.plectix.simulator.parser.abstractmodel.observables.ModelObservables readComponent(com.plectix.simulator.parser.KappaFileParagraph) -> Code
com.plectix.simulator.parser.abstractmodel.reader.PerturbationsParagraphReader -> com.w:
    com.plectix.simulator.parser.util.AgentFactory agentFactory -> Code
    43:47:com.plectix.simulator.parser.abstractmodel.perturbations.conditions.PerturbationCondition parseCondition(java.lang.String,com.plectix.simulator.parser.KappaFileLine) -> Code
    52:55:com.plectix.simulator.parser.abstractmodel.perturbations.conditions.PerturbationCondition parseSimpleCondition(java.lang.String,com.plectix.simulator.parser.KappaFileLine) -> V
    70:98:java.util.List readComponent(com.plectix.simulator.parser.KappaFileParagraph) -> Code
    102:119:com.plectix.simulator.parser.abstractmodel.perturbations.conditions.ModelTimeCondition parseTimeCondition(java.lang.String,com.plectix.simulator.parser.KappaFileLine) -> Code
    174:180:com.plectix.simulator.util.InequalitySign parseInequalitySign(java.lang.String,int) -> Code
    185:235:com.plectix.simulator.parser.abstractmodel.perturbations.modifications.AbstractOnceModification checkOnce(java.lang.String,com.plectix.simulator.parser.KappaFileLine) -> Code
com.plectix.simulator.parser.abstractmodel.reader.RulesParagraphReader -> com.b:
    com.plectix.simulator.simulator.SimulationArguments simulationArguments -> Code
    29:39:java.util.Collection readComponent(com.plectix.simulator.parser.KappaFileParagraph) -> Code
    46:207:int fullRule(java.util.List,int,boolean,com.plectix.simulator.parser.KappaFileLine) -> Code
    216:227:double readRateInBrackets(java.lang.String) -> Code
com.plectix.simulator.parser.abstractmodel.reader.SolutionParagraphReader -> com.aUX:
    com.plectix.simulator.simulator.SimulationArguments simulationArguments -> Code
    28:93:com.plectix.simulator.parser.abstractmodel.ModelSolution readComponent(com.plectix.simulator.parser.KappaFileParagraph) -> Code
com.plectix.simulator.parser.abstractmodel.reader.StoriesParagraphReader -> com.lPt9:
com.plectix.simulator.parser.builders.KappaSystemBuilder -> com.Com9:
    com.plectix.simulator.simulator.SimulationData simulationData -> Code
    25:62:void build() -> Code
com.plectix.simulator.parser.builders.MasterSolutionModel -> com.cOm7:
    java.util.Map masterMap -> Code
    28:41:boolean isCorrect(com.plectix.simulator.staticanalysis.Agent) -> Code
    46:49:void checkCorrect(java.util.List,com.plectix.simulator.parser.abstractmodel.SolutionLineData) -> Code
    52:59:void checkCorrect(com.plectix.simulator.staticanalysis.Rule,java.lang.String) -> Code
    62:63:void throwExeption(java.lang.String) -> Code
    68:72:void checkCorrect(com.plectix.simulator.simulationclasses.perturbations.ComplexPerturbation,com.plectix.simulator.parser.abstractmodel.ModelPerturbation) -> Code
com.plectix.simulator.parser.builders.ObservablesBuilder -> com.ai:
    com.plectix.simulator.staticanalysis.Observables existingObservables -> Code
    com.plectix.simulator.parser.builders.SubstanceBuilder substanceBuilder -> Code
    29:47:com.plectix.simulator.staticanalysis.Observables build(com.plectix.simulator.parser.abstractmodel.observables.ModelObservables,java.util.List) -> Code
com.plectix.simulator.parser.builders.PerturbationsBuilder -> com.COm5:
    com.plectix.simulator.parser.builders.SubstanceBuilder substanceBuilder -> Code
    com.plectix.simulator.simulator.SimulationArguments simulationArguments -> Code
    com.plectix.simulator.simulationclasses.solution.SolutionFactory kappaSystem$6bacc877 -> Code
    57:66:java.util.List build(java.util.List,com.plectix.simulator.parser.builders.MasterSolutionModel) -> Code
    70:80:com.plectix.simulator.staticanalysis.Rule findRule(java.lang.String) -> Code
    85:95:com.plectix.simulator.simulationclasses.perturbations.util.LinearExpression createRateExpression(com.plectix.simulator.parser.abstractmodel.perturbations.ModelLinearExpression) -> Code
    100:110:com.plectix.simulator.simulationclasses.perturbations.util.LinearExpression createSpeciesExpression(com.plectix.simulator.parser.abstractmodel.perturbations.ModelLinearExpression) -> V
    120:143:com.plectix.simulator.simulationclasses.perturbations.ConditionInterface convert(com.plectix.simulator.parser.abstractmodel.perturbations.conditions.PerturbationCondition) -> Code
    194:202:com.plectix.simulator.interfaces.ObservableInterface checkObservableForExistance(java.lang.String) -> Code
com.plectix.simulator.parser.builders.PerturbationsBuilder$1 -> com.COm5$1:
    int[] $SwitchMap$com$plectix$simulator$parser$abstractmodel$perturbations$conditions$ConditionType -> Code
    int[] $SwitchMap$com$plectix$simulator$parser$abstractmodel$perturbations$modifications$ModificationType -> V
com.plectix.simulator.parser.builders.RuleBuilder -> com.lPt3:
    com.plectix.simulator.parser.builders.SubstanceBuilder substanceBuilder -> Code
    com.plectix.simulator.simulationclasses.solution.SolutionFactory kappaSystem$510b2e7a -> Code
    25:32:java.util.List build(java.util.Collection,com.plectix.simulator.parser.builders.MasterSolutionModel) -> Code
com.plectix.simulator.parser.builders.SolutionBuilder -> com.Lpt3:
    com.plectix.simulator.simulationclasses.solution.SolutionFactory kappaSystem$6bacc877 -> Code
    com.plectix.simulator.simulator.SimulationArguments simulationArguments -> Code
    com.plectix.simulator.parser.builders.SubstanceBuilder substanceBuilder -> Code
    28:50:com.plectix.simulator.interfaces.SolutionInterface build(com.plectix.simulator.parser.abstractmodel.ModelSolution,com.plectix.simulator.parser.builders.MasterSolutionModel) -> Code
com.plectix.simulator.parser.builders.SubstanceBuilder -> com.CoM5:
    com.plectix.simulator.simulationclasses.solution.SolutionFactory kappaSystem$510b2e7a -> Code
    26:58:java.util.List buildAgents(java.util.List) -> Code
    62:68:com.plectix.simulator.staticanalysis.Agent convertAgent(com.plectix.simulator.parser.abstractmodel.ModelAgent) -> Code
com.plectix.simulator.parser.util.AgentFactory -> com.com5:
    boolean allowIncompletes -> Code
    33:73:java.util.List parseAgent(java.lang.String) -> Code
    78:141:com.plectix.simulator.parser.abstractmodel.ModelSite parseSite(java.lang.String,java.util.Map) -> Code
    148:188:com.plectix.simulator.parser.util.SiteProperty parseLine(java.lang.String,com.plectix.simulator.parser.util.SitePropertyKey) -> Code
    18:34:boolean check(java.lang.String) -> Code
com.plectix.simulator.parser.util.AgentFactory$1 -> com.com5$1:
    int[] $SwitchMap$com$plectix$simulator$parser$util$SitePropertyKey -> Code
com.plectix.simulator.parser.util.SiteProperty -> com.lPT9:
    java.lang.String siteLine -> Code
    java.lang.String propertyLine -> V
    9:9:java.lang.String getSiteLine() -> Code
    13:13:java.lang.String getPropertyLine() -> V
    17:18:void setSiteLine(java.lang.String) -> Code
    21:22:void setPropertyLine(java.lang.String) -> V
com.plectix.simulator.parser.util.SitePropertyKey -> com.lpt6:
    com.plectix.simulator.parser.util.SitePropertyKey INTERNAL_STATE -> Code
    com.plectix.simulator.parser.util.SitePropertyKey BLIND_CONNECTION -> V
    com.plectix.simulator.parser.util.SitePropertyKey WILDCARD -> I
    com.plectix.simulator.parser.util.SitePropertyKey CONNECTION -> Z
    java.lang.String symbol -> Code
    com.plectix.simulator.parser.util.SitePropertyKey[] $VALUES -> Code
    4:4:com.plectix.simulator.parser.util.SitePropertyKey[] values() -> values
    4:4:com.plectix.simulator.parser.util.SitePropertyKey valueOf(java.lang.String) -> valueOf
    14:14:java.lang.String getSymbol() -> Code
com.plectix.simulator.simulationclasses.action.Action -> com.CoM1:
    com.plectix.simulator.staticanalysis.Agent sourceAgent -> Code
    com.plectix.simulator.staticanalysis.Agent targetAgent -> V
    com.plectix.simulator.staticanalysis.Rule rule -> Code
    com.plectix.simulator.interfaces.SolutionElementInterface rightHandSideComponent$4b9597c0 -> Code
    com.plectix.simulator.interfaces.SolutionElementInterface leftHandSideComponent$4b9597c0 -> V
    com.plectix.simulator.simulationclasses.action.ActionType type -> Code
    com.plectix.simulator.staticanalysis.Site targetSite -> Code
    com.plectix.simulator.staticanalysis.Site sourceSite -> V
    void doAction(com.plectix.simulator.simulationclasses.solution.RuleApplicationPoolInterface,com.plectix.simulator.simulationclasses.injections.Injection,com.plectix.simulator.simulationclasses.action.ActionObserverInteface,com.plectix.simulator.simulator.SimulationData) -> Code
    87:96:int getAgentIdInCCBySideId(com.plectix.simulator.staticanalysis.Agent) -> Code
    106:155:java.util.Collection createAtomicActions() -> Code
    169:171:void setActionApplicationSites(com.plectix.simulator.staticanalysis.Site,com.plectix.simulator.staticanalysis.Site) -> Code
    181:182:void setType(com.plectix.simulator.simulationclasses.action.ActionType) -> Code
    189:189:com.plectix.simulator.staticanalysis.Site getSourceSite() -> Code
    197:197:com.plectix.simulator.staticanalysis.Site getTargetSite() -> V
    204:204:com.plectix.simulator.staticanalysis.Agent getSourceAgent() -> Code
    211:211:com.plectix.simulator.staticanalysis.Agent getTargetAgent() -> V
    219:219:com.plectix.simulator.interfaces.SolutionElementInterface getRightCComponent$758f3181() -> Code
    227:227:com.plectix.simulator.interfaces.SolutionElementInterface getLeftCComponent$758f3181() -> V
    231:231:com.plectix.simulator.staticanalysis.Rule getRule() -> Code
    235:235:com.plectix.simulator.simulationclasses.action.ActionType getType() -> Code
com.plectix.simulator.simulationclasses.action.ActionObserverInteface -> com.R:
    void addToEvent(com.plectix.simulator.staticanalysis.Agent,com.plectix.simulator.staticanalysis.stories.ActionOfAEvent,com.plectix.simulator.staticanalysis.Agent) -> Code
    void addSiteToEvent(com.plectix.simulator.staticanalysis.Site) -> Code
    void deleteAddNonFixedSites(com.plectix.simulator.staticanalysis.Agent) -> Code
    void deleteAddToEvent(com.plectix.simulator.staticanalysis.Site,boolean) -> V
    void modifyAddSite(com.plectix.simulator.staticanalysis.Site,boolean) -> I
    void addAtomicEvent(com.plectix.simulator.staticanalysis.stories.storage.WireHashKey,com.plectix.simulator.staticanalysis.Site,com.plectix.simulator.staticanalysis.stories.ActionOfAEvent,boolean) -> Code
    void setTypeById(com.plectix.simulator.staticanalysis.stories.storage.StoriesAgentTypesStorage) -> Code
    void registerAgent(com.plectix.simulator.staticanalysis.Agent) -> V
    void boundAddToEventContainer$481cde6b(com.plectix.simulator.staticanalysis.Site) -> V
    void breakAddToEvent(com.plectix.simulator.staticanalysis.Site,boolean) -> Code
com.plectix.simulator.simulationclasses.action.ActionType -> com.CoM4:
    com.plectix.simulator.simulationclasses.action.ActionType NONE -> Code
    com.plectix.simulator.simulationclasses.action.ActionType BREAK -> V
    com.plectix.simulator.simulationclasses.action.ActionType DELETE -> I
    com.plectix.simulator.simulationclasses.action.ActionType ADD -> Z
    com.plectix.simulator.simulationclasses.action.ActionType BOUND -> B
    com.plectix.simulator.simulationclasses.action.ActionType MODIFY -> C
    com.plectix.simulator.simulationclasses.action.ActionType[] $VALUES -> Code
    49:49:com.plectix.simulator.simulationclasses.action.ActionType[] values() -> values
    49:49:com.plectix.simulator.simulationclasses.action.ActionType valueOf(java.lang.String) -> valueOf
com.plectix.simulator.simulationclasses.action.AddAction -> com.nul:
    52:72:void doAction(com.plectix.simulator.simulationclasses.solution.RuleApplicationPoolInterface,com.plectix.simulator.simulationclasses.injections.Injection,com.plectix.simulator.simulationclasses.action.ActionObserverInteface,com.plectix.simulator.simulator.SimulationData) -> Code
com.plectix.simulator.simulationclasses.action.BoundAction -> com.lpT2:
    70:129:void doAction(com.plectix.simulator.simulationclasses.solution.RuleApplicationPoolInterface,com.plectix.simulator.simulationclasses.injections.Injection,com.plectix.simulator.simulationclasses.action.ActionObserverInteface,com.plectix.simulator.simulator.SimulationData) -> Code
    140:148:java.util.List getAgentsFromConnectedComponent(java.util.List) -> Code
com.plectix.simulator.simulationclasses.action.BreakAction -> com.ap:
    53:87:void doAction(com.plectix.simulator.simulationclasses.solution.RuleApplicationPoolInterface,com.plectix.simulator.simulationclasses.injections.Injection,com.plectix.simulator.simulationclasses.action.ActionObserverInteface,com.plectix.simulator.simulator.SimulationData) -> Code
com.plectix.simulator.simulationclasses.action.DefaultAction -> com.am:
    39:45:void doAction(com.plectix.simulator.simulationclasses.solution.RuleApplicationPoolInterface,com.plectix.simulator.simulationclasses.injections.Injection,com.plectix.simulator.simulationclasses.action.ActionObserverInteface,com.plectix.simulator.simulator.SimulationData) -> Code
com.plectix.simulator.simulationclasses.action.DeleteAction -> com.LPt4:
    50:90:void doAction(com.plectix.simulator.simulationclasses.solution.RuleApplicationPoolInterface,com.plectix.simulator.simulationclasses.injections.Injection,com.plectix.simulator.simulationclasses.action.ActionObserverInteface,com.plectix.simulator.simulator.SimulationData) -> Code
com.plectix.simulator.simulationclasses.action.ModifyAction -> com.L:
    48:58:void doAction(com.plectix.simulator.simulationclasses.solution.RuleApplicationPoolInterface,com.plectix.simulator.simulationclasses.injections.Injection,com.plectix.simulator.simulationclasses.action.ActionObserverInteface,com.plectix.simulator.simulator.SimulationData) -> Code
com.plectix.simulator.simulationclasses.bologna.Reaction -> com.Com7:
    com.plectix.simulator.simulationclasses.injections.Injection firstInjection -> Code
    com.plectix.simulator.simulationclasses.injections.Injection secondInjection -> V
    com.plectix.simulator.interfaces.SolutionElementInterface firstComponent$4b9597c0 -> Code
    com.plectix.simulator.interfaces.SolutionElementInterface secondComponent$4b9597c0 -> V
    java.util.List list -> Code
    com.plectix.simulator.simulationclasses.bologna.ReactionClass type -> Code
    com.plectix.simulator.staticanalysis.Rule rule -> Code
    com.plectix.simulator.staticanalysis.Agent agentInFirstComponentToSwap -> Code
    com.plectix.simulator.staticanalysis.Agent agentInSecondComponentToSwap -> V
    69:84:com.plectix.simulator.staticanalysis.Agent findSimilarAgent$79f88daf(com.plectix.simulator.interfaces.SolutionElementInterface,com.plectix.simulator.staticanalysis.Agent,com.plectix.simulator.staticanalysis.Agent) -> Code
    88:93:java.util.List getInjections() -> Code
    100:100:boolean isPolymerizing() -> Code
    108:108:boolean isUnary() -> V
    115:115:boolean isSimpleBinary() -> I
    122:122:com.plectix.simulator.staticanalysis.Rule getRule() -> Code
    126:152:java.util.List getSwappedReactions() -> V
com.plectix.simulator.simulationclasses.bologna.ReactionClass -> com.ag:
    com.plectix.simulator.simulationclasses.bologna.ReactionClass UNARY -> Code
    com.plectix.simulator.simulationclasses.bologna.ReactionClass BINARY_TWICE_POLYMERIZING -> V
    com.plectix.simulator.simulationclasses.bologna.ReactionClass BINARY_POLYMERIZING -> I
    com.plectix.simulator.simulationclasses.bologna.ReactionClass BINARY -> Z
    com.plectix.simulator.simulationclasses.bologna.ReactionClass[] $VALUES -> Code
    3:3:com.plectix.simulator.simulationclasses.bologna.ReactionClass[] values() -> values
    3:3:com.plectix.simulator.simulationclasses.bologna.ReactionClass valueOf(java.lang.String) -> valueOf
com.plectix.simulator.simulationclasses.injections.Injection -> com.com9:
    java.util.Map agentsCorrespondence -> Code
    java.util.List sites -> Code
    java.util.List changedSites -> V
    com.plectix.simulator.interfaces.SolutionElementInterface connectedComponent$4b9597c0 -> Code
    com.plectix.simulator.simulationclasses.solution.SuperSubstance superSubstanceImage -> Code
    long power -> Code
    48:49:void removeSiteFromSitesList(com.plectix.simulator.staticanalysis.Site) -> Code
    59:61:void addToChangedSites(com.plectix.simulator.staticanalysis.Site) -> V
    64:67:boolean checkSiteExistanceAmongChangedSites(com.plectix.simulator.staticanalysis.Site) -> Code
    71:76:com.plectix.simulator.staticanalysis.Agent getAgentFromImageById(int) -> Code
    80:80:java.util.List getChangedSites() -> Code
    92:92:java.util.Collection getSiteList() -> Code
    96:96:com.plectix.simulator.interfaces.SolutionElementInterface getConnectedComponent$758f3181() -> Code
    100:102:void setSuperSubstance(com.plectix.simulator.simulationclasses.solution.SuperSubstance) -> Code
    105:105:com.plectix.simulator.simulationclasses.solution.SuperSubstance getSuperSubstance() -> Code
    113:118:com.plectix.simulator.staticanalysis.Agent getImageAgent() -> Code
    122:138:boolean findInCollection(java.util.List) -> Code
    143:143:double getWeight() -> Code
    147:147:boolean isSuper() -> Code
    151:155:void setSimple() -> Code
    158:159:void eliminate() -> V
    162:163:void incPower() -> I
    166:167:void setPower(long) -> Code
com.plectix.simulator.simulationclasses.injections.LiftElement -> com.COm7:
    com.plectix.simulator.staticanalysis.ConnectedComponent connectedComponent -> Code
    com.plectix.simulator.simulationclasses.injections.Injection injection -> Code
    34:34:com.plectix.simulator.staticanalysis.ConnectedComponent getConnectedComponent() -> Code
    41:41:com.plectix.simulator.simulationclasses.injections.Injection getInjection() -> Code
com.plectix.simulator.simulationclasses.perturbations.AbstractModification -> com.u:
    boolean performed -> Code
    void doItAll() -> Code
    11:13:void perform() -> V
    16:16:boolean wasPerformed() -> Code
    com.plectix.simulator.parser.abstractmodel.perturbations.modifications.ModificationType getType() -> Code
com.plectix.simulator.simulationclasses.perturbations.AddOnceModification -> com.ah:
    13:13:com.plectix.simulator.parser.abstractmodel.perturbations.modifications.ModificationType getType() -> Code
com.plectix.simulator.simulationclasses.perturbations.ComplexCondition -> com.LPT8:
    java.util.Collection conditions -> Code
    17:22:boolean check(double) -> Code
    27:27:com.plectix.simulator.parser.abstractmodel.perturbations.conditions.ConditionType getType() -> Code
com.plectix.simulator.simulationclasses.perturbations.ComplexPerturbation -> com.lPT6:
    com.plectix.simulator.simulationclasses.perturbations.ConditionInterface condition -> Code
    com.plectix.simulator.simulationclasses.perturbations.AbstractModification modification -> Code
    13:13:com.plectix.simulator.simulationclasses.perturbations.ConditionInterface getCondition() -> Code
    17:17:com.plectix.simulator.simulationclasses.perturbations.AbstractModification getModification() -> Code
    22:27:java.lang.String toString() -> toString
com.plectix.simulator.simulationclasses.perturbations.ConditionInterface -> com.cOm8:
    boolean check(double) -> Code
    com.plectix.simulator.parser.abstractmodel.perturbations.conditions.ConditionType getType() -> Code
com.plectix.simulator.simulationclasses.perturbations.DeleteOnceModification -> com.aG:
    13:13:com.plectix.simulator.parser.abstractmodel.perturbations.modifications.ModificationType getType() -> Code
com.plectix.simulator.simulationclasses.perturbations.OnceModification -> com.lPt8:
    com.plectix.simulator.simulationclasses.perturbations.PerturbationRule rule -> Code
    int quantity -> Code
    24:30:java.lang.StringBuffer allComponentsToStringBuffer(java.util.List) -> Code
    35:47:java.lang.String toString() -> toString
    52:54:void doItAll() -> Code
    57:57:com.plectix.simulator.simulationclasses.perturbations.PerturbationRule getPerturbationRule() -> Code
com.plectix.simulator.simulationclasses.perturbations.OnceModification$1 -> com.lPt8$1:
    int[] $SwitchMap$com$plectix$simulator$parser$abstractmodel$perturbations$modifications$ModificationType -> Code
com.plectix.simulator.simulationclasses.perturbations.PerturbationRule -> com.cOm6:
    int count -> Code
    boolean inf -> Code
    com.plectix.simulator.staticanalysis.stories.storage.NullEvent nullEvent -> Code
    43:48:void setCount(double) -> Code
    52:55:void applyRuleForStories$2bfd5e3c(java.util.List,com.plectix.simulator.staticanalysis.stories.storage.EventBuilder,com.plectix.simulator.simulator.SimulationData) -> Code
    59:62:void applyRule(java.util.List,com.plectix.simulator.simulator.SimulationData) -> Code
    68:75:void check() -> I
    81:84:void downRule() -> Z
com.plectix.simulator.simulationclasses.perturbations.RateModification -> com.aUx:
    com.plectix.simulator.staticanalysis.Rule rule -> Code
    com.plectix.simulator.simulationclasses.perturbations.util.LinearExpression expression -> Code
    25:26:void doItAll() -> Code
    30:34:java.lang.String toString() -> toString
    39:39:com.plectix.simulator.parser.abstractmodel.perturbations.modifications.ModificationType getType() -> Code
com.plectix.simulator.simulationclasses.perturbations.SpeciesCondition -> com.v:
    com.plectix.simulator.interfaces.ObservableInterface pickedObservable -> Code
    com.plectix.simulator.simulationclasses.perturbations.util.LinearExpression expression -> Code
    com.plectix.simulator.staticanalysis.Observables observables -> Code
    com.plectix.simulator.util.InequalitySign inequalitySign -> Code
    32:33:boolean check(double) -> Code
    38:38:com.plectix.simulator.parser.abstractmodel.perturbations.conditions.ConditionType getType() -> Code
    43:43:com.plectix.simulator.util.InequalitySign inequalitySign() -> Code
    47:47:com.plectix.simulator.interfaces.ObservableInterface getPickedObservable() -> Code
    51:51:com.plectix.simulator.simulationclasses.perturbations.util.LinearExpression getExpression() -> Code
    56:60:java.lang.String toString() -> toString
com.plectix.simulator.simulationclasses.perturbations.TimeCondition -> com.LpT3:
    double timeLimit -> Code
    15:15:boolean check(double) -> Code
    20:20:com.plectix.simulator.parser.abstractmodel.perturbations.conditions.ConditionType getType() -> Code
    29:29:double getTimeLimit() -> Code
    34:34:java.lang.String toString() -> toString
com.plectix.simulator.simulationclasses.perturbations.util.LinearExpression -> com.LPT9:
    java.util.Map monomes -> Code
    10:20:void addMonome(com.plectix.simulator.simulationclasses.perturbations.util.Vector,double) -> Code
    23:29:void addMonome(double) -> Code
    32:36:double calculate() -> Code
    41:47:java.lang.String toString() -> toString
com.plectix.simulator.simulationclasses.perturbations.util.Monome -> com.cOn:
    com.plectix.simulator.simulationclasses.perturbations.util.Vector vector -> Code
    double value -> Code
    24:26:double getMultiplication() -> Code
    30:30:double getCoefficient() -> V
    34:35:void setCoefficient(double) -> Code
    39:42:java.lang.String toString() -> toString
com.plectix.simulator.simulationclasses.perturbations.util.Vector -> com.COM4:
    double getValue() -> Code
    java.lang.String getName() -> Code
com.plectix.simulator.simulationclasses.perturbations.util.VectorObservable -> com.COM5:
    com.plectix.simulator.interfaces.ObservableInterface observable -> Code
    com.plectix.simulator.staticanalysis.Observables observables -> Code
    17:17:double getValue() -> Code
    22:22:java.lang.String getName() -> Code
com.plectix.simulator.simulationclasses.perturbations.util.VectorRule -> com.lpt4:
    com.plectix.simulator.staticanalysis.Rule rule -> Code
    14:14:double getValue() -> Code
    19:19:java.lang.String getName() -> Code
com.plectix.simulator.simulationclasses.probability.SkipListItem -> com.CoM6:
    com.plectix.simulator.simulationclasses.probability.WeightedItem weightedItem -> Code
    java.util.List sums -> Code
    java.util.List forwardpointers -> V
    java.util.List backPointers -> I
    18:18:int getLevel() -> Code
    22:26:void clear() -> Code
    29:31:boolean addPointersAndSum(com.plectix.simulator.simulationclasses.probability.SkipListItem,com.plectix.simulator.simulationclasses.probability.SkipListItem,double) -> Code
    35:42:void removePointersAndSum(int) -> Code
    45:45:double getSum(int) -> Code
    49:50:void incrementSum(int,double) -> Code
    53:54:void resetSum(int) -> V
    57:57:com.plectix.simulator.simulationclasses.probability.SkipListItem getForwardPointer(int) -> Code
    61:61:com.plectix.simulator.simulationclasses.probability.SkipListItem getBackwardPointer(int) -> V
    65:66:void setForwardPointer(int,com.plectix.simulator.simulationclasses.probability.SkipListItem) -> Code
    69:70:void setBackwardPointer(int,com.plectix.simulator.simulationclasses.probability.SkipListItem) -> V
    73:73:com.plectix.simulator.simulationclasses.probability.WeightedItem getWeightedItem() -> Code
    77:78:void setWeightedItem(com.plectix.simulator.simulationclasses.probability.WeightedItem) -> Code
com.plectix.simulator.simulationclasses.probability.WeightedItem -> com.ak:
    double getWeight() -> Code
com.plectix.simulator.simulationclasses.probability.WeightedItemSelector -> com.com7:
    double totalWeight -> Code
    int currentLevel -> Code
    com.plectix.simulator.simulationclasses.probability.SkipListItem head -> Code
    com.plectix.simulator.simulationclasses.probability.SkipListItem tail -> V
    java.util.Map weightedItemToSkipListItemMap -> Code
    36:40:com.plectix.simulator.simulationclasses.probability.WeightedItem select() -> Code
    50:68:void updatedItem(com.plectix.simulator.simulationclasses.probability.WeightedItem) -> Code
    106:106:double getTotalWeight() -> Code
    169:177:void adjustWeightsForward(com.plectix.simulator.simulationclasses.probability.SkipListItem,double,int) -> Code
com.plectix.simulator.simulationclasses.solution.AbstractComplexSolution -> com.lPT8:
    com.plectix.simulator.simulationclasses.solution.StraightStorage straightStorage -> Code
    com.plectix.simulator.simulationclasses.solution.SuperStorage superStorage -> Code
    26:26:com.plectix.simulator.simulationclasses.solution.StraightStorage getStraightStorage() -> Code
    31:31:com.plectix.simulator.simulationclasses.solution.SuperStorage getSuperStorage() -> Code
    48:50:void clear() -> Code
com.plectix.simulator.simulationclasses.solution.AbstractSolutionForHigherModes -> com.COm2:
    void addConnectedComponent$695c1db5(com.plectix.simulator.interfaces.SolutionElementInterface) -> Code
    29:48:void flushPoolContent(com.plectix.simulator.simulationclasses.solution.RuleApplicationPoolInterface) -> Code
    51:54:void addInitialConnectedComponents(long,java.util.List) -> Code
com.plectix.simulator.simulationclasses.solution.OperationMode -> com.O:
    com.plectix.simulator.simulationclasses.solution.OperationMode FIRST -> Code
    com.plectix.simulator.simulationclasses.solution.OperationMode SECOND -> V
    com.plectix.simulator.simulationclasses.solution.OperationMode THIRD -> I
    com.plectix.simulator.simulationclasses.solution.OperationMode FOURTH -> Z
    com.plectix.simulator.simulationclasses.solution.OperationMode FIFTH -> B
    com.plectix.simulator.simulationclasses.solution.OperationMode DEFAULT -> C
    java.lang.String string -> Code
    com.plectix.simulator.simulationclasses.solution.OperationMode[] $VALUES -> Code
    29:29:com.plectix.simulator.simulationclasses.solution.OperationMode[] values() -> values
    29:29:com.plectix.simulator.simulationclasses.solution.OperationMode valueOf(java.lang.String) -> valueOf
    44:49:com.plectix.simulator.simulationclasses.solution.OperationMode getValue(java.lang.String) -> Code
com.plectix.simulator.simulationclasses.solution.RuleApplicationPoolInterface -> com.lPT3:
    void addAgent(com.plectix.simulator.staticanalysis.Agent) -> Code
    void removeAgent(com.plectix.simulator.staticanalysis.Agent) -> V
    com.plectix.simulator.simulationclasses.solution.StraightStorage getStorage() -> Code
    void clear() -> Code
com.plectix.simulator.simulationclasses.solution.SolutionAdapter -> com.p:
    java.util.List solutionLines -> Code
    com.plectix.simulator.simulationclasses.solution.SolutionFactory kappaSystem$6bacc877 -> Code
    34:46:void checkSolutionLinesAndAdd(java.lang.String,long) -> Code
    50:50:java.util.List getSolutionLines() -> Code
    55:56:void clearSolutionLines() -> V
    63:63:com.plectix.simulator.interfaces.SolutionElementInterface cloneConnectedComponent$1e5ed741(com.plectix.simulator.interfaces.SolutionElementInterface) -> Code
    69:103:java.util.List cloneAgentsList(java.util.List) -> Code
    108:108:com.plectix.simulator.simulationclasses.solution.SolutionFactory getKappaSystem$7ae87116() -> Code
com.plectix.simulator.simulationclasses.solution.SolutionFactory -> com.aux:
    com.plectix.simulator.simulationclasses.probability.WeightedItemSelector rules -> Code
    java.util.List orderedRulesList -> Code
    com.plectix.simulator.staticanalysis.stories.Stories stories -> Code
    java.util.List perturbations -> V
    com.plectix.simulator.staticanalysis.Observables observables -> Code
    com.plectix.simulator.interfaces.SolutionInterface solution -> Code
    com.plectix.simulator.staticanalysis.contactmap.ContactMap contactMap -> Code
    com.plectix.simulator.staticanalysis.subviews.AllSubViewsOfAllAgentsInterface subViews -> Code
    com.plectix.simulator.staticanalysis.influencemap.InfluenceMap influenceMap -> Code
    com.plectix.simulator.staticanalysis.localviews.LocalViewsMain localViews -> Code
    com.plectix.simulator.staticanalysis.speciesenumeration.SpeciesEnumeration enumerationOfSpecies -> Code
    com.plectix.simulator.io.xml.RuleCompressionXMLWriter ruleCompressionWriter -> Code
    com.plectix.simulator.util.IdGenerator agentsIdGenerator -> Code
    com.plectix.simulator.util.IdGenerator ruleIdGenerator -> V
    com.plectix.simulator.simulator.SimulationData simulationData -> Code
    18:38:com.plectix.simulator.interfaces.SolutionInterface produce$5d1ea4b(com.plectix.simulator.simulationclasses.solution.OperationMode,com.plectix.simulator.simulationclasses.solution.SolutionFactory) -> Code
    358:358:long generateNextRuleId() -> Code
    369:369:long generateNextAgentId() -> V
    73:163:void initialize(com.plectix.simulator.util.Info$InfoType) -> Code
    167:176:void compressRules(com.plectix.simulator.staticanalysis.rulecompression.RuleCompressionType,java.util.Collection) -> Code
    189:200:void doPositiveUpdate(com.plectix.simulator.staticanalysis.Rule,java.util.List) -> Code
    227:237:java.util.List chooseInjectionsForRuleApplication(com.plectix.simulator.staticanalysis.Rule) -> Code
    249:251:void setRules(java.util.List) -> Code
    261:275:void checkPerturbation(double) -> Code
    285:285:java.util.List getRules() -> Code
    297:302:com.plectix.simulator.staticanalysis.Rule getRuleById(int) -> Code
    311:311:com.plectix.simulator.interfaces.SolutionInterface getSolution() -> Code
    321:321:com.plectix.simulator.staticanalysis.Observables getObservables() -> Code
    330:330:com.plectix.simulator.staticanalysis.stories.Stories getStories() -> Code
    339:339:com.plectix.simulator.staticanalysis.contactmap.ContactMap getContactMap() -> Code
    348:348:com.plectix.simulator.staticanalysis.subviews.AllSubViewsOfAllAgentsInterface getSubViews() -> Code
    379:379:java.util.List getPerturbations() -> V
    392:394:void addRule(com.plectix.simulator.staticanalysis.Rule) -> Code
    404:405:void setSolution(com.plectix.simulator.interfaces.SolutionInterface) -> Code
    415:416:void setObservables(com.plectix.simulator.staticanalysis.Observables) -> Code
    426:427:void setStories(com.plectix.simulator.staticanalysis.stories.Stories) -> Code
    437:454:void addStories(java.lang.String) -> Code
    465:466:void setPerturbations(java.util.List) -> V
    477:479:void resetIdGenerators() -> Code
    487:489:void clearRules() -> V
    498:501:void clearPerturbations() -> I
    511:515:com.plectix.simulator.staticanalysis.Rule getRandomRule() -> Code
    531:538:void updateRuleActivities() -> Z
    546:551:double getTimeValue() -> Code
    561:561:com.plectix.simulator.staticanalysis.influencemap.InfluenceMap getInfluenceMap() -> Code
    570:576:com.plectix.simulator.staticanalysis.localviews.LocalViewsMain getLocalViews() -> Code
    587:587:com.plectix.simulator.staticanalysis.speciesenumeration.SpeciesEnumeration getEnumerationOfSpecies() -> Code
    591:591:com.plectix.simulator.io.xml.RuleCompressionXMLWriter getRuleCompressionBuilder() -> Code
com.plectix.simulator.simulationclasses.solution.SolutionFactory$1 -> com.aux$1:
    int[] $SwitchMap$com$plectix$simulator$simulationclasses$solution$OperationMode -> Code
com.plectix.simulator.simulationclasses.solution.SolutionFifthMode -> com.aO:
    com.plectix.simulator.simulationclasses.solution.SuperStorage superStorage -> Code
    com.plectix.simulator.simulationclasses.solution.StraightStorage straightStorage -> Code
    24:29:void addConnectedComponent$695c1db5(com.plectix.simulator.interfaces.SolutionElementInterface) -> Code
com.plectix.simulator.simulationclasses.solution.SolutionFirstMode -> com.LpT4:
    com.plectix.simulator.simulationclasses.solution.StraightStorage straightStorage -> Code
    31:31:com.plectix.simulator.simulationclasses.solution.RuleApplicationPoolInterface prepareRuleApplicationPool() -> Code
    40:40:void flushPoolContent(com.plectix.simulator.simulationclasses.solution.RuleApplicationPoolInterface) -> Code
    44:52:void addInitialConnectedComponents(long,java.util.List) -> Code
    61:61:void addInjectionToPool(com.plectix.simulator.simulationclasses.solution.RuleApplicationPoolInterface,com.plectix.simulator.simulationclasses.injections.Injection) -> Code
com.plectix.simulator.simulationclasses.solution.SolutionFourthMode -> com.ac:
    com.plectix.simulator.simulationclasses.solution.SuperStorage superStorage -> Code
    18:19:void addConnectedComponent$695c1db5(com.plectix.simulator.interfaces.SolutionElementInterface) -> Code
    23:23:com.plectix.simulator.simulationclasses.solution.RuleApplicationPoolInterface prepareRuleApplicationPool() -> Code
    28:39:void addInjectionToPool(com.plectix.simulator.simulationclasses.solution.RuleApplicationPoolInterface,com.plectix.simulator.simulationclasses.injections.Injection) -> Code
com.plectix.simulator.simulationclasses.solution.SolutionLine -> com.ao:
    java.lang.String line -> Code
    long number -> Code
    21:21:java.lang.String getLine() -> Code
    28:28:long getNumber() -> Code
    36:37:void setNumber(long) -> Code
com.plectix.simulator.simulationclasses.solution.SolutionSecondMode -> com.a:
    com.plectix.simulator.simulationclasses.solution.SuperStorage superStorage -> Code
    com.plectix.simulator.simulationclasses.solution.StraightStorage straightStorage -> Code
    23:26:void addInjectionToPool(com.plectix.simulator.simulationclasses.solution.RuleApplicationPoolInterface,com.plectix.simulator.simulationclasses.injections.Injection) -> Code
    30:30:com.plectix.simulator.simulationclasses.solution.RuleApplicationPoolInterface prepareRuleApplicationPool() -> Code
    36:36:void flushPoolContent(com.plectix.simulator.simulationclasses.solution.RuleApplicationPoolInterface) -> Code
    40:43:void addInitialConnectedComponents(long,java.util.List) -> Code
com.plectix.simulator.simulationclasses.solution.SolutionThirdMode -> com.CoM3:
    com.plectix.simulator.simulationclasses.solution.SuperStorage superStorage -> Code
    com.plectix.simulator.simulationclasses.solution.StraightStorage straightStorage -> Code
    20:23:void addConnectedComponent$695c1db5(com.plectix.simulator.interfaces.SolutionElementInterface) -> Code
    27:27:com.plectix.simulator.simulationclasses.solution.RuleApplicationPoolInterface prepareRuleApplicationPool() -> Code
    32:45:void addInjectionToPool(com.plectix.simulator.simulationclasses.solution.RuleApplicationPoolInterface,com.plectix.simulator.simulationclasses.injections.Injection) -> Code
com.plectix.simulator.simulationclasses.solution.StandardRuleApplicationPool -> com.d:
    com.plectix.simulator.simulationclasses.solution.StraightStorage temporaryStorage -> Code
    20:21:void addAgent(com.plectix.simulator.staticanalysis.Agent) -> Code
    25:26:void removeAgent(com.plectix.simulator.staticanalysis.Agent) -> V
    30:30:com.plectix.simulator.simulationclasses.solution.StraightStorage getStorage() -> Code
    35:36:void clear() -> Code
com.plectix.simulator.simulationclasses.solution.StraightStorage -> com.D:
    java.util.Set agentMap -> Code
    35:38:void addAgent(com.plectix.simulator.staticanalysis.Agent) -> Code
    45:49:void removeAgent(com.plectix.simulator.staticanalysis.Agent) -> V
    53:58:void addConnectedComponent$695c1db5(com.plectix.simulator.interfaces.SolutionElementInterface) -> Code
    65:65:java.util.Collection getAgents() -> Code
    70:82:java.util.Collection split() -> V
    103:104:void clear() -> Code
com.plectix.simulator.simulationclasses.solution.SuperStorage -> com.COm4:
    java.util.Map data -> Code
    com.plectix.simulator.interfaces.SolutionInterface solution -> Code
    int agentsLimit -> Code
    int maxComponentLength -> V
    43:54:boolean tryIncrement$695c1db9(com.plectix.simulator.interfaces.SolutionElementInterface) -> Code
    58:59:void refreshMaxLength$695c1db5(com.plectix.simulator.interfaces.SolutionElementInterface) -> V
    68:77:void addOrEvenIncrement$543752af(long,com.plectix.simulator.interfaces.SolutionElementInterface) -> Code
    81:88:void addConnectedComponent$695c1db5(com.plectix.simulator.interfaces.SolutionElementInterface) -> Code
    92:93:void clear() -> Code
    109:115:com.plectix.simulator.interfaces.SolutionElementInterface extractComponent$548c2d5b(com.plectix.simulator.simulationclasses.injections.Injection) -> Code
    139:140:void setInjectionsForSuperSubstance(com.plectix.simulator.simulationclasses.solution.SuperSubstance) -> Code
    148:148:java.util.Collection getComponents() -> Code
    157:157:int getAgentsLimit() -> Code
    166:167:void setAgentsLimit(int) -> Code
com.plectix.simulator.simulationclasses.solution.SuperSubstance -> com.c:
    long quantity -> Code
    com.plectix.simulator.interfaces.SolutionElementInterface component$4b9597c0 -> Code
    java.lang.String stringHash -> Code
    29:33:com.plectix.simulator.interfaces.SolutionElementInterface extract$758f3181() -> Code
    42:43:void setComponent$695c1db5(com.plectix.simulator.interfaces.SolutionElementInterface) -> Code
    49:49:boolean isEmpty() -> Code
    56:57:void add() -> Code
    64:65:void add(long) -> Code
    71:71:com.plectix.simulator.interfaces.SolutionElementInterface getComponent$758f3181() -> V
    78:78:long getQuantity() -> Code
    85:85:java.lang.String getHash() -> Code
    90:90:java.lang.String toString() -> toString
com.plectix.simulator.simulationclasses.solution.TransparentRuleApplicationPool -> com.LpT5:
    com.plectix.simulator.simulationclasses.solution.StraightStorage temporaryStorage -> Code
    21:21:com.plectix.simulator.simulationclasses.solution.StraightStorage getStorage() -> Code
    26:27:void removeAgent(com.plectix.simulator.staticanalysis.Agent) -> V
    31:32:void addAgent(com.plectix.simulator.staticanalysis.Agent) -> Code
    37:37:void clear() -> Code
com.plectix.simulator.simulator.DefaultRandom -> com.aM:
    java.util.Random random -> Code
    19:19:double getDouble() -> Code
    23:23:int getInteger(int) -> Code
    27:29:void setSeed(long) -> Code
com.plectix.simulator.simulator.DefaultSimulatorFactory -> com.DSF:
    8:8:com.plectix.simulator.controller.SimulatorInterface createSimulator() -> cS
com.plectix.simulator.simulator.ObservablesLiveDataSource -> com.lpt3:
    int numberOfUniqueObservables -> Code
    java.util.List uniqueObservables -> Code
    java.lang.String[] plotNames -> Code
    com.plectix.simulator.streaming.LiveData$PlotType[] plotTypes -> Code
    48:52:double[] getPlotValues() -> Code
    56:56:java.lang.String[] getPlotNames() -> Code
    60:60:com.plectix.simulator.streaming.LiveData$PlotType[] getPlotTypes() -> Code
com.plectix.simulator.simulator.ObservablesLiveDataSource$SimulatorPlotTypeEnum -> com.lpt3$aux:
    com.plectix.simulator.simulator.ObservablesLiveDataSource$SimulatorPlotTypeEnum OBSERVABLE -> Code
    com.plectix.simulator.simulator.ObservablesLiveDataSource$SimulatorPlotTypeEnum RULE -> V
    com.plectix.simulator.simulator.ObservablesLiveDataSource$SimulatorPlotTypeEnum[] $VALUES -> Code
    13:13:com.plectix.simulator.simulator.ObservablesLiveDataSource$SimulatorPlotTypeEnum[] values() -> values
    13:13:com.plectix.simulator.simulator.ObservablesLiveDataSource$SimulatorPlotTypeEnum valueOf(java.lang.String) -> valueOf
    18:18:java.lang.String getName() -> gN
com.plectix.simulator.simulator.SimulationArguments -> com.CoM8:
    boolean noDumpStdoutStderr -> Code
    boolean help -> V
    boolean version -> I
    com.plectix.simulator.util.Info$InfoType shortConsoleOutput -> Code
    java.lang.String xmlSessionName -> Code
    double initialTime -> Code
    int points -> Code
    double rescale -> V
    int seed -> V
    long maxClashes -> Code
    long maxNumberOfEvents -> V
    double timeLength -> I
    boolean isTime -> Z
    int iterations -> I
    boolean activationMap -> B
    boolean inhibitionMap -> C
    boolean createSubViews -> S
    boolean deadRules -> F
    boolean compile -> D
    boolean debugInit -> L
    boolean genereteMap -> a
    boolean createLocalViews -> b
    boolean storify -> c
    boolean forwardOnly -> d
    boolean ocamlStyleNaming -> e
    boolean unifiedTimeSeriesOutput -> f
    long wallClockTimeLimit -> I
    long monitorPeakMemory -> Z
    int clockPrecision -> Z
    boolean outputFinalState -> g
    java.lang.String xmlSessionPath -> V
    java.lang.String inputFilename -> I
    java.lang.String snapshotsTimeString -> Z
    java.lang.String focusFilename -> B
    java.lang.String commandLineString -> C
    com.plectix.simulator.simulator.SimulationArguments$SimulationType simulationType -> Code
    com.plectix.simulator.simulator.SimulationArguments$StoryCompressionMode storifyMode -> Code
    com.plectix.simulator.simulationclasses.solution.OperationMode operationMode -> Code
    boolean allowIncompletes -> h
    int agentsLimit -> B
    int liveDataInterval -> C
    int liveDataPoints -> S
    java.lang.String liveDataConsumerClassname -> S
    boolean useEnumerationOfSpecies -> i
    boolean runQuantitativeCompression -> j
    boolean runQualitativeCompression -> k
    boolean allowIncompleteSubstance -> l
    boolean reportExactSampleTime -> m
    153:153:java.lang.String getXmlSessionName() -> Code
    165:166:void setXmlSessionName(java.lang.String) -> Code
    169:169:double getInitialTime() -> Code
    180:181:void setInitialTime(double) -> Code
    184:184:int getPoints() -> Code
    194:195:void setPoints(int) -> Code
    198:198:double getRescale() -> V
    210:211:void setRescale(double) -> V
    214:214:int getSeed() -> V
    229:230:void setSeed(int) -> V
    233:234:void updateRandom() -> Code
    237:237:long getMaxClashes() -> Code
    257:258:void setMaxClashes(long) -> Code
    261:261:boolean isTime() -> Code
    274:275:void setTime(boolean) -> Code
    278:278:double getTimeLength() -> I
    291:292:void setTimeLength(double) -> I
    295:295:long getMaxNumberOfEvents() -> V
    308:309:void setMaxNumberOfEvents(long) -> V
    312:312:boolean isActivationMap() -> V
    322:323:void setActivationMap(boolean) -> V
    326:326:boolean isInhibitionMap() -> I
    335:336:void setInhibitionMap(boolean) -> I
    339:339:boolean isCompile() -> Z
    351:352:void setCompile$1385ff() -> V
    355:355:boolean debugModeIsOn() -> B
    365:366:void setDebugInit$1385ff() -> I
    369:369:boolean isGenereteMap() -> C
    378:379:void setGenereteMap$1385ff() -> Z
    382:382:boolean storiesModeIsOn() -> S
    393:394:void setStorify$1385ff() -> B
    397:397:boolean isForwardOnly() -> F
    408:409:void setForwardOnly(boolean) -> Z
    412:412:boolean isOcamlStyleNameingInUse() -> D
    416:416:boolean isUnifiedTimeSeriesOutput() -> L
    442:443:void setOcamlStyleObservableNames$1385ff() -> C
    446:447:void setUnifiedTimeSeriesOutput$1385ff() -> S
    451:451:long getWallClockTimeLimit() -> I
    463:464:void setWallClockTimeLimit(long) -> I
    467:467:long getMonitorPeakMemory() -> Z
    479:480:void setMonitorPeakMemory(long) -> Z
    483:483:int getClockPrecision() -> I
    506:507:void setClockPrecision(int) -> I
    510:510:boolean isOutputFinalState() -> a
    520:521:void setOutputFinalState$1385ff() -> F
    524:524:java.lang.String getXmlSessionPath() -> V
    534:535:void setXmlSessionPath(java.lang.String) -> V
    538:538:java.lang.String getInputFilename() -> I
    547:548:void setInputFilename(java.lang.String) -> I
    564:564:java.lang.String getSnapshotsTimeString() -> Z
    575:576:void setSnapshotsTimeString(java.lang.String) -> Z
    579:579:java.lang.String getFocusFilename() -> B
    590:591:void setFocusFilename(java.lang.String) -> B
    595:595:java.lang.String getCommandLineString() -> C
    606:607:void setCommandLineString(java.lang.String) -> C
    610:610:boolean isNoDumpStdoutStderr() -> b
    619:620:void setNoDumpStdoutStderr$1385ff() -> D
    623:623:int getIterations() -> Z
    640:641:void setIterations(int) -> Z
    644:644:com.plectix.simulator.simulator.SimulationArguments$SimulationType getSimulationType() -> Code
    654:655:void setSimulationType(com.plectix.simulator.simulator.SimulationArguments$SimulationType) -> Code
    658:658:com.plectix.simulator.simulator.SimulationArguments$StoryCompressionMode getStorifyMode() -> Code
    668:669:void setStorifyMode(com.plectix.simulator.simulator.SimulationArguments$StoryCompressionMode) -> Code
    672:672:boolean isHelp() -> c
    681:682:void setHelp$1385ff() -> L
    685:685:boolean isVersion() -> d
    696:697:void setVersion$1385ff() -> a
    700:700:com.plectix.simulator.util.Info$InfoType getOutputTypeForAdditionalInfo() -> Code
    709:710:void setShortConsoleOutput() -> b
    717:718:void setOperationMode(java.lang.String) -> S
    721:721:com.plectix.simulator.simulationclasses.solution.OperationMode getOperationMode() -> Code
    725:726:void rejectIncompletes() -> c
    729:729:boolean incompletesAllowed() -> e
    733:734:void setAgentsLimit(int) -> B
    737:737:int getAgentsLimit() -> B
    741:742:void setShowDeadRules$1385ff() -> d
    745:745:boolean isDeadRulesShow() -> f
    749:752:void setCreateLocalViews(boolean) -> B
    755:756:void setCreateSubViews$1385ff() -> e
    759:759:boolean createSubViews() -> g
    763:763:boolean createLocalViews() -> h
    767:768:void setEnumerationOfSpecies(boolean) -> C
    771:771:boolean useEnumerationOfSpecies() -> i
    775:775:int getLiveDataInterval() -> C
    779:780:void setLiveDataInterval(int) -> C
    783:783:int getLiveDataPoints() -> S
    794:795:void setLiveDataPoints(int) -> S
    798:799:void setRunQuantitativeCompression$1385ff() -> f
    802:802:boolean runQuantitativeCompression() -> j
    806:807:void setRunQualitativeCompression$1385ff() -> g
    810:810:boolean runQualitativeCompression() -> k
    814:814:java.lang.String getLiveDataConsumerClassname() -> S
    818:819:void setLiveDataConsumerClassname(java.lang.String) -> F
    822:823:void setAllowIncompleteSubstance$1385ff() -> h
    826:826:boolean isAllowIncompleteSubstance() -> l
    830:831:void setReportExactSampleTime(boolean) -> S
    834:834:boolean getReportExactSampleTime() -> m
com.plectix.simulator.simulator.SimulationArguments$SimulationType -> com.CoM8$aux:
    com.plectix.simulator.simulator.SimulationArguments$SimulationType NONE -> Code
    com.plectix.simulator.simulator.SimulationArguments$SimulationType COMPILE -> V
    com.plectix.simulator.simulator.SimulationArguments$SimulationType STORIFY -> I
    com.plectix.simulator.simulator.SimulationArguments$SimulationType SIM -> Z
    com.plectix.simulator.simulator.SimulationArguments$SimulationType GENERATE_MAP -> B
    com.plectix.simulator.simulator.SimulationArguments$SimulationType CONTACT_MAP -> C
    com.plectix.simulator.simulator.SimulationArguments$SimulationType[] $VALUES -> Code
    31:31:com.plectix.simulator.simulator.SimulationArguments$SimulationType[] values() -> values
    31:31:com.plectix.simulator.simulator.SimulationArguments$SimulationType valueOf(java.lang.String) -> valueOf
com.plectix.simulator.simulator.SimulationArguments$StoryCompressionMode -> com.CoM8$Aux:
    com.plectix.simulator.simulator.SimulationArguments$StoryCompressionMode NONE -> Code
    com.plectix.simulator.simulator.SimulationArguments$StoryCompressionMode WEAK -> V
    com.plectix.simulator.simulator.SimulationArguments$StoryCompressionMode STRONG -> I
    com.plectix.simulator.simulator.SimulationArguments$StoryCompressionMode[] $VALUES -> Code
    41:41:com.plectix.simulator.simulator.SimulationArguments$StoryCompressionMode[] values() -> values
    41:41:com.plectix.simulator.simulator.SimulationArguments$StoryCompressionMode valueOf(java.lang.String) -> valueOf
com.plectix.simulator.simulator.SimulationClock -> com.aI:
    long clockStamp -> Code
    double step -> Code
    double nextStep -> V
    double stepStories -> I
    double nextStepStories -> Z
    com.plectix.simulator.simulator.SimulationData simulationData -> Code
    22:50:boolean isEndSimulation(double,long) -> Code
    55:56:void resetBar() -> Code
    59:65:void checkAndInitStoriesBar() -> V
    68:83:void checkStoriesBar(int) -> Code
    86:92:void setEvent(long) -> Code
    95:102:void setTimeLength(double) -> Code
    106:119:void stopTimer(com.plectix.simulator.util.Info$InfoType,com.plectix.simulator.util.PlxTimer,java.lang.String) -> Code
    122:123:void setClockStamp(long) -> V
com.plectix.simulator.simulator.SimulationData -> com.COM9:
    java.util.List snapshots -> Code
    java.util.List infoList -> V
    java.util.List snapshotTimes -> I
    boolean argumentsInitialized -> Code
    com.plectix.simulator.simulator.SimulationArguments simulationArguments -> Code
    com.plectix.simulator.parser.abstractmodel.KappaModel initialModel -> Code
    com.plectix.simulator.simulationclasses.solution.SolutionFactory kappaSystem$6bacc877 -> Code
    com.plectix.simulator.io.ConsoleOutputManager consoleOutputManager -> Code
    com.plectix.simulator.simulator.SimulationClock clock -> Code
    35:35:com.plectix.simulator.simulationclasses.solution.SolutionFactory getKappaSystem$7ae87116() -> Code
    39:39:com.plectix.simulator.parser.abstractmodel.KappaModel getInitialModel() -> Code
    43:44:void setInitialModel(com.plectix.simulator.parser.abstractmodel.KappaModel) -> Code
    47:53:void clear() -> Code
    57:89:void setSimulationArguments$37b306e8(com.plectix.simulator.simulator.SimulationArguments) -> Code
    92:95:void checkOutputFinalState(double) -> Code
    98:99:void createSnapshots(double) -> V
    102:110:boolean checkSnapshots(double) -> Code
    115:116:void addInfo(com.plectix.simulator.util.Info$InfoType,java.lang.String) -> Code
    119:128:void addInfo(com.plectix.simulator.util.Info) -> Code
    135:135:com.plectix.simulator.simulator.SimulationArguments getSimulationArguments() -> Code
    146:156:void setSnapshotTime(java.lang.String) -> Code
    167:168:void setConsolePrintStream(java.io.PrintStream) -> Code
    171:171:com.plectix.simulator.staticanalysis.stories.storage.StoriesAgentTypesStorage getStoriesAgentTypesStorage() -> Code
    176:176:com.plectix.simulator.io.ConsoleOutputManager getConsoleOutputManager() -> Code
    180:180:boolean argumentsInitialized() -> Code
    184:184:com.plectix.simulator.simulator.SimulationClock getClock() -> Code
    188:188:java.util.List getInfo() -> Code
    192:192:java.util.List getSnapshots() -> V
com.plectix.simulator.simulator.Simulator -> com.COM1:
    java.lang.String INTRO_MESSAGE -> Code
    com.plectix.simulator.util.io.PlxLogger LOGGER -> Code
    double currentTime -> Code
    long currentEventNumber -> Code
    int currentIterationNumber -> Code
    com.plectix.simulator.simulator.SimulationData simulationData -> Code
    com.plectix.simulator.io.ConsoleOutputManager consoleOutputManager -> Code
    com.plectix.simulator.simulator.SimulatorStatus simulatorStatus -> Code
    com.plectix.simulator.controller.SimulatorResultsData simulatorResultsData -> Code
    com.plectix.simulator.streaming.LiveDataStreamer liveDataStreamer -> Code
    java.lang.Object statusLock -> Code
    com.plectix.simulator.staticanalysis.RuleApplicator ruleApplicator -> Code
    90:122:com.plectix.simulator.controller.SimulatorStatusInterface getStatus() -> Code
    132:132:com.plectix.simulator.streaming.LiveData getLiveData() -> Code
    137:140:void cleanUpAfterException(java.lang.Exception) -> Code
    149:162:void endSimulation$25f7a416(boolean,com.plectix.simulator.util.PlxTimer) -> Code
    191:202:void readInputKappaFile() -> Code
    237:245:void initializeKappaSystem() -> V
    273:302:void run(com.plectix.simulator.controller.SimulatorInputData) -> Code
    305:512:void runSimulation() -> I
    515:668:void runStories() -> Z
    685:685:com.plectix.simulator.controller.SimulatorResultsData getSimulatorResultsData() -> Code
com.plectix.simulator.simulator.Simulator$1 -> com.COM1$1:
    int[] $SwitchMap$com$plectix$simulator$util$Info$InfoType -> Code
com.plectix.simulator.simulator.SimulatorCommandLine -> com.SCL:
    java.lang.String commandLineString -> Code
    org.apache.commons.cli.CommandLine commandLine -> Code
    com.plectix.simulator.simulator.SimulationArguments simulationArguments -> Code
    43:43:com.plectix.simulator.simulator.SimulationArguments getSimulationArguments() -> gSA
    47:47:boolean hasOption(com.plectix.simulator.simulator.SimulatorOption) -> Code
    51:51:java.lang.String getValue(com.plectix.simulator.simulator.SimulatorOption) -> Code
    55:55:int getIntValue(com.plectix.simulator.simulator.SimulatorOption) -> Code
    59:59:long getLongValue(com.plectix.simulator.simulator.SimulatorOption) -> Code
    63:63:java.lang.Double getDoubleValue(com.plectix.simulator.simulator.SimulatorOption) -> Code
    67:407:com.plectix.simulator.simulator.SimulationArguments createSimulationArguments() -> Code
    411:414:java.lang.String setNewFileName(java.lang.String,java.lang.String) -> Code
com.plectix.simulator.simulator.SimulatorOption -> com.COm1:
    com.plectix.simulator.simulator.SimulatorOption SIMULATIONFILE -> Code
    com.plectix.simulator.simulator.SimulatorOption COMPILE -> V
    com.plectix.simulator.simulator.SimulatorOption TIME -> I
    com.plectix.simulator.simulator.SimulatorOption SEED -> Z
    com.plectix.simulator.simulator.SimulatorOption NO_SEED -> B
    com.plectix.simulator.simulator.SimulatorOption XML_SESSION_NAME -> C
    com.plectix.simulator.simulator.SimulatorOption OUTPUT_XML -> S
    com.plectix.simulator.simulator.SimulatorOption DO_XML -> aj
    com.plectix.simulator.simulator.SimulatorOption STORIFY -> F
    com.plectix.simulator.simulator.SimulatorOption EVENT -> D
    com.plectix.simulator.simulator.SimulatorOption RANDOMIZER_JAVA -> L
    com.plectix.simulator.simulator.SimulatorOption SNAPSHOT_TIME -> a
    com.plectix.simulator.simulator.SimulatorOption DEBUG_INIT -> b
    com.plectix.simulator.simulator.SimulatorOption NO_ACTIVATION_MAP -> c
    com.plectix.simulator.simulator.SimulatorOption INIT -> d
    com.plectix.simulator.simulator.SimulatorOption RESCALE -> e
    com.plectix.simulator.simulator.SimulatorOption POINTS -> f
    com.plectix.simulator.simulator.SimulatorOption MAX_CLASHES -> g
    com.plectix.simulator.simulator.SimulatorOption GENERATE_MAP -> h
    com.plectix.simulator.simulator.SimulatorOption CONTACT_MAP -> i
    com.plectix.simulator.simulator.SimulatorOption NO_MAPS -> j
    com.plectix.simulator.simulator.SimulatorOption NO_BUILD_INFLUENCE_MAP -> k
    com.plectix.simulator.simulator.SimulatorOption BUILD_INFLUENCE_MAP -> l
    com.plectix.simulator.simulator.SimulatorOption FORWARD -> m
    com.plectix.simulator.simulator.SimulatorOption OUTPUT_SCHEME -> n
    com.plectix.simulator.simulator.SimulatorOption HELP -> o
    com.plectix.simulator.simulator.SimulatorOption VERSION -> p
    com.plectix.simulator.simulator.SimulatorOption NO_GC -> ak
    com.plectix.simulator.simulator.SimulatorOption PROFILE -> al
    com.plectix.simulator.simulator.SimulatorOption KEY -> am
    com.plectix.simulator.simulator.SimulatorOption NO_INHIBITION_MAP -> q
    com.plectix.simulator.simulator.SimulatorOption INHIBITION_MAP -> r
    com.plectix.simulator.simulator.SimulatorOption COMPRESS_STORIES -> s
    com.plectix.simulator.simulator.SimulatorOption DONT_COMPRESS_STORIES -> t
    com.plectix.simulator.simulator.SimulatorOption USE_STRONG_COMPRESSION -> u
    com.plectix.simulator.simulator.SimulatorOption DONT_USE_STRONG_COMPRESSION -> v
    com.plectix.simulator.simulator.SimulatorOption MERGE_MAPS -> w
    com.plectix.simulator.simulator.SimulatorOption WARNINGS -> an
    com.plectix.simulator.simulator.SimulatorOption ITERATION -> x
    com.plectix.simulator.simulator.SimulatorOption FINAL_STATE -> ao
    com.plectix.simulator.simulator.SimulatorOption NO_ARROW_CLOSURE -> ap
    com.plectix.simulator.simulator.SimulatorOption NO_MEASURE -> aq
    com.plectix.simulator.simulator.SimulatorOption QUOTIENT_REFINEMENTS -> ar
    com.plectix.simulator.simulator.SimulatorOption MEMORY_LIMIT -> as
    com.plectix.simulator.simulator.SimulatorOption CORES -> at
    com.plectix.simulator.simulator.SimulatorOption QA -> au
    com.plectix.simulator.simulator.SimulatorOption SNAPSHOT_TMP -> av
    com.plectix.simulator.simulator.SimulatorOption LOG_COMPRESSION -> aw
    com.plectix.simulator.simulator.SimulatorOption BACKTRACK_LIMIT -> ax
    com.plectix.simulator.simulator.SimulatorOption MAX_PER_TIME_COMPRESSION -> ay
    com.plectix.simulator.simulator.SimulatorOption REORDER_BY_DEPTH -> az
    com.plectix.simulator.simulator.SimulatorOption MULTISET_ORDER -> aA
    com.plectix.simulator.simulator.SimulatorOption LINEAR_ORDER -> aB
    com.plectix.simulator.simulator.SimulatorOption HTML_OUTPUT -> aC
    com.plectix.simulator.simulator.SimulatorOption DOT_OUTPUT -> aD
    com.plectix.simulator.simulator.SimulatorOption NO_RULES -> aE
    com.plectix.simulator.simulator.SimulatorOption PLOT -> aF
    com.plectix.simulator.simulator.SimulatorOption NO_ABSTRACTION -> aG
    com.plectix.simulator.simulator.SimulatorOption OUTPUT_FINAL_STATE -> y
    com.plectix.simulator.simulator.SimulatorOption SET_SNAPSHOT_TIME -> aH
    com.plectix.simulator.simulator.SimulatorOption TIME_SAMPLE -> aI
    com.plectix.simulator.simulator.SimulatorOption EVENT_SAMPLE -> aJ
    com.plectix.simulator.simulator.SimulatorOption NO_DUMP_ITERATION_NUMBER -> aK
    com.plectix.simulator.simulator.SimulatorOption NO_DUMP_RULE_ITERATION -> aL
    com.plectix.simulator.simulator.SimulatorOption NO_COMPUTE_QUANTITATIVE_COMPRESSION -> aM
    com.plectix.simulator.simulator.SimulatorOption OUTPUT_QUANTITATIVE_COMPRESSION -> z
    com.plectix.simulator.simulator.SimulatorOption NO_COMPUTE_QUALITATIVE_COMPRESSION -> aN
    com.plectix.simulator.simulator.SimulatorOption OUTPUT_QUALITATIVE_COMPRESSION -> A
    com.plectix.simulator.simulator.SimulatorOption NO_ENUMERATE_COMPLEXES -> E
    com.plectix.simulator.simulator.SimulatorOption ENUMERATE_COMPLEXES -> G
    com.plectix.simulator.simulator.SimulatorOption RESET_ALL -> aO
    com.plectix.simulator.simulator.SimulatorOption FOCUS_ON -> H
    com.plectix.simulator.simulator.SimulatorOption DO_LOW_RES_CONTACT_MAP -> aP
    com.plectix.simulator.simulator.SimulatorOption CLOCK_PRECISION -> J
    com.plectix.simulator.simulator.SimulatorOption WALL_CLOCK_TIME_LIMIT -> K
    com.plectix.simulator.simulator.SimulatorOption OCAML_STYLE_OBS_NAME -> M
    com.plectix.simulator.simulator.SimulatorOption UNIFIED_TIME_SERIES_OUTPUT -> N
    com.plectix.simulator.simulator.SimulatorOption NO_DUMP_STDOUT_STDERR -> O
    com.plectix.simulator.simulator.SimulatorOption SHORT_CONSOLE_OUTPUT -> P
    com.plectix.simulator.simulator.SimulatorOption OPERATION_MODE -> Q
    com.plectix.simulator.simulator.SimulatorOption MONITOR_PEAK_MEMORY -> R
    com.plectix.simulator.simulator.SimulatorOption COMPUTE_SUB_VIEWS -> T
    com.plectix.simulator.simulator.SimulatorOption COMPUTE_DEAD_RILES -> U
    com.plectix.simulator.simulator.SimulatorOption REJECT_INCOMPLETES -> W
    com.plectix.simulator.simulator.SimulatorOption NO_DO_COMPUTE_DAG_REFINEMENT_RELATION -> aQ
    com.plectix.simulator.simulator.SimulatorOption NO_COMPUTE_LOCAL_VIEWS -> X
    com.plectix.simulator.simulator.SimulatorOption COMPUTE_LOCAL_VIEWS -> Y
    com.plectix.simulator.simulator.SimulatorOption AGENTS_LIMIT -> aa
    com.plectix.simulator.simulator.SimulatorOption LIVE_DATA_INTERVAL -> ab
    com.plectix.simulator.simulator.SimulatorOption LIVE_DATA_POINTS -> ac
    com.plectix.simulator.simulator.SimulatorOption ALLOW_INCOMPLETE_SUBSTANCE -> ad
    com.plectix.simulator.simulator.SimulatorOption REPORT_EXACT_SAMPLE_TIME -> ae
    com.plectix.simulator.simulator.SimulatorOption REPORT_AFTER_SAMPLE_TIME -> af
    com.plectix.simulator.simulator.SimulatorOption QUALITATIVE_COMPRESSION -> ag
    com.plectix.simulator.simulator.SimulatorOption QUANTITATIVE_COMPRESSION -> ah
    com.plectix.simulator.simulator.SimulatorOption LIVE_DATA_CONSUMER_CLASSNAME -> ai
    java.lang.String shortName -> Code
    java.lang.String longName -> V
    java.lang.String description -> I
    boolean hasArguments -> Code
    org.apache.commons.cli.Options COMMAND_LINE_OPTIONS -> Code
    com.plectix.simulator.simulator.SimulatorOption[] $VALUES -> Code
    5:5:com.plectix.simulator.simulator.SimulatorOption[] values() -> values
    5:5:com.plectix.simulator.simulator.SimulatorOption valueOf(java.lang.String) -> valueOf
    187:187:java.lang.String getLongName() -> Code
com.plectix.simulator.simulator.SimulatorStatus -> com.nuL:
    long currentEventNumber -> Code
    int currentIterationNumber -> Code
    double currentTime -> Code
    double progress -> V
    java.lang.String statusMessage -> Code
    28:28:double getCurrentEventNumber() -> Code
    32:32:int getCurrentIterationNumber() -> Code
    36:36:double getCurrentTime() -> V
    52:52:double getProgress() -> gP
    56:56:java.lang.String getStatusMessage() -> gSM
    60:61:void setCurrentEventNumber(long) -> Code
    64:65:void setCurrentIterationNumber(int) -> Code
    68:69:void setCurrentTime(double) -> Code
    72:73:void setProgress(double) -> V
    76:77:void setStatusMessage(java.lang.String) -> Code
com.plectix.simulator.simulator.ThreadLocalData -> com.COm8:
    com.plectix.simulator.simulator.ThreadLocalData$ThreadLocalContainer random -> Code
    java.lang.ThreadLocal emptyConnectedComponent -> Code
    java.lang.ThreadLocal emptyInjection -> V
    java.lang.ThreadLocal decimalFormatters -> I
    java.lang.ThreadLocal exponentialDecimalFormatters -> Z
    109:120:java.text.DecimalFormat getDecimalFormat(int) -> Code
    134:134:com.plectix.simulator.util.io.PlxLogger getLogger(java.lang.Class) -> Code
    141:141:com.plectix.simulator.interfaces.RandomInterface getRandom() -> Code
    145:145:com.plectix.simulator.staticanalysis.ConnectedComponent getEmptyConnectedComponent() -> Code
    149:149:com.plectix.simulator.simulationclasses.injections.Injection getEmptyInjection() -> Code
com.plectix.simulator.simulator.ThreadLocalData$1 -> com.ay:
    30:30:java.lang.Object initialValue() -> initialValue
com.plectix.simulator.simulator.ThreadLocalData$2 -> com.ax:
    40:40:java.lang.Object initialValue() -> initialValue
com.plectix.simulator.simulator.ThreadLocalData$3 -> com.aH:
    47:47:java.lang.Object initialValue() -> initialValue
com.plectix.simulator.simulator.ThreadLocalData$4 -> com.aL:
    54:54:java.lang.Object initialValue() -> initialValue
com.plectix.simulator.simulator.ThreadLocalData$5 -> com.aE:
    61:61:java.lang.Object initialValue() -> initialValue
com.plectix.simulator.simulator.ThreadLocalData$6 -> com.aF:
    81:81:java.lang.Object initialValue() -> initialValue
com.plectix.simulator.simulator.ThreadLocalData$ThreadLocalContainer -> com.COm8$aux:
com.plectix.simulator.simulator.initialization.InjectionSettingStrategy -> com.l:
    void process$3f123ca5(com.plectix.simulator.interfaces.SolutionElementInterface,com.plectix.simulator.staticanalysis.Agent) -> Code
com.plectix.simulator.simulator.initialization.InjectionsBuilder -> com.lpT9:
    com.plectix.simulator.simulationclasses.solution.SolutionFactory kappaSystem$6bacc877 -> Code
    22:37:void walkInjectingComponents(com.plectix.simulator.simulator.initialization.InjectionSettingStrategy,com.plectix.simulator.staticanalysis.Agent) -> Code
    40:50:void build() -> Code
    53:57:void build(com.plectix.simulator.simulationclasses.solution.SuperSubstance) -> Code
com.plectix.simulator.simulator.initialization.StraightInjectionSettingStrategy -> com.az:
    10:16:void process$3f123ca5(com.plectix.simulator.interfaces.SolutionElementInterface,com.plectix.simulator.staticanalysis.Agent) -> Code
com.plectix.simulator.staticanalysis.Agent -> com.aj:
    int idInConnectedComponent -> Code
    int idInRuleSide -> V
    java.lang.String name -> Code
    long id -> Code
    com.plectix.simulator.staticanalysis.Site defaultSite -> Code
    java.util.Map siteMap -> Code
    62:72:com.plectix.simulator.interfaces.SolutionElementInterface getConnectedComponent$758f3181() -> Code
    76:92:java.util.Map getAdjacentAgents(java.util.Map) -> Code
    100:100:com.plectix.simulator.staticanalysis.Site getDefaultSite() -> V
    111:120:boolean hasSimilarInjection(com.plectix.simulator.simulationclasses.injections.Injection) -> Code
    128:133:boolean checkSites$7e120041(com.plectix.simulator.staticanalysis.Site,com.plectix.simulator.simulationclasses.injections.Injection,com.plectix.simulator.interfaces.SolutionElementInterface) -> Code
    145:158:com.plectix.simulator.staticanalysis.Agent findLinkAgent(com.plectix.simulator.staticanalysis.Agent,java.util.List) -> Code
    167:169:void addSite(com.plectix.simulator.staticanalysis.Site) -> V
    176:184:boolean equalz(com.plectix.simulator.staticanalysis.Agent) -> Code
    213:241:boolean siteMapsAreEqual(com.plectix.simulator.staticanalysis.Agent) -> V
    253:253:int getIdInRuleHandside() -> V
    257:258:void setIdInRuleSide(int) -> V
    266:266:com.plectix.simulator.staticanalysis.Site getSiteByName(java.lang.String) -> Code
    275:275:java.lang.String getName() -> V
    283:283:int getIdInConnectedComponent() -> I
    292:293:void setIdInConnectedComponent(int) -> I
    299:299:java.util.Collection getSites() -> Code
    307:307:long getId() -> Code
    311:312:void setId(int) -> Z
    315:316:void removeSite(java.lang.String) -> Code
    325:329:com.plectix.simulator.staticanalysis.Agent clone() -> V
    334:358:java.lang.String toString() -> toString
    363:363:java.lang.String getDefaultName() -> Code
    19:19:java.lang.Object clone() -> clone
    19:19:int compareTo(java.lang.Object) -> compareTo
com.plectix.simulator.staticanalysis.ChangedSite -> com.COm9:
    com.plectix.simulator.staticanalysis.Site site -> Code
    boolean hasLinkState -> Code
    boolean hasInternalState -> V
    16:16:com.plectix.simulator.staticanalysis.Site getSite() -> Code
    20:20:boolean hasLinkState() -> Code
    24:24:boolean hasInternalState() -> V
    28:29:void setLinkState(boolean) -> Code
    32:33:void setInternalState(boolean) -> V
com.plectix.simulator.staticanalysis.ConnectedComponent -> com.COn:
    java.util.List agents -> Code
    java.util.Map spanningTreeMap -> Code
    java.util.List agentFromSolutionForRightHandSide -> V
    java.util.Map agentsLinks -> V
    java.util.List injectedSites -> I
    com.plectix.simulator.simulationclasses.solution.SuperSubstance superSubstance -> Code
    com.plectix.simulator.simulationclasses.probability.WeightedItemSelector injections -> Code
    boolean isEmpty -> Code
    67:67:boolean isEmpty() -> Code
    71:72:void setSuperSubstance(com.plectix.simulator.simulationclasses.solution.SuperSubstance) -> Code
    75:75:com.plectix.simulator.simulationclasses.solution.SuperSubstance getSubstance() -> Code
    85:86:void addAgentFromSolutionForRHS(com.plectix.simulator.staticanalysis.Agent) -> Code
    94:95:void clearAgentsFromSolutionForRHS() -> Code
    103:103:java.util.List getAgentFromSolutionForRHS() -> Code
    120:121:void removeInjection(com.plectix.simulator.simulationclasses.injections.Injection) -> Code
    124:124:long getInjectionsWeight() -> Code
    133:147:void initSpanningTreeMap() -> b_
    154:158:void setInjection(com.plectix.simulator.simulationclasses.injections.Injection) -> V
    166:171:com.plectix.simulator.simulationclasses.injections.Injection createInjection(com.plectix.simulator.staticanalysis.Agent) -> Code
    180:192:void doPositiveUpdate(java.util.List) -> Code
    199:199:java.util.List getAgents() -> V
    242:255:boolean isInjectionCorrect() -> V
    259:283:boolean isAutomorphicTo(com.plectix.simulator.staticanalysis.Agent) -> Code
    294:306:boolean agentsAreCompletelyEqual(com.plectix.simulator.staticanalysis.Agent,com.plectix.simulator.staticanalysis.Agent) -> Code
    316:327:boolean compareAgents(com.plectix.simulator.staticanalysis.Agent,com.plectix.simulator.staticanalysis.Agent) -> V
    354:369:boolean viewSpanningTree(com.plectix.simulator.staticanalysis.Agent,com.plectix.simulator.staticanalysis.SpanningTree,int,boolean) -> Code
    390:392:void updateInjection(com.plectix.simulator.simulationclasses.injections.Injection,long) -> Code
    400:400:com.plectix.simulator.simulationclasses.injections.Injection getRandomInjection() -> Code
    418:421:java.util.List getAgentsSortedByIdInRule() -> I
    425:437:java.util.Set getIncomingInjectionsSet() -> Code
    441:444:void burnIncomingInjections() -> I
    447:450:void incrementIncomingInjections() -> Z
    453:467:void deleteIncomingInjections() -> B
    473:473:java.lang.String getSmilesString() -> a_
    478:481:java.lang.String toString() -> toString
com.plectix.simulator.staticanalysis.InternalState -> com.aA:
    java.lang.String DEFAULT_NAME -> Code
    com.plectix.simulator.staticanalysis.InternalState EMPTY_STATE -> Code
    java.lang.String name -> V
    36:36:boolean isRankRoot() -> Code
    44:45:void setName(java.lang.String) -> Code
    52:52:java.lang.String getName() -> V
    57:63:boolean equals(java.lang.Object) -> equals
    82:85:boolean compareInternalStates(com.plectix.simulator.staticanalysis.InternalState) -> Code
    95:95:boolean equalz(com.plectix.simulator.staticanalysis.InternalState) -> V
    100:100:java.lang.String getDefaultName() -> Code
com.plectix.simulator.staticanalysis.Link -> com.com4:
    com.plectix.simulator.staticanalysis.LinkStatus statusLink -> Code
    com.plectix.simulator.staticanalysis.Site linkSite -> Code
    int linkStateId -> Code
    35:35:int getLinkStateId() -> Code
    42:43:void setLinkStateId(int) -> Code
    49:52:void setFree() -> Code
    55:59:void setWildLinkState() -> V
    62:65:void setSemiLink() -> I
    72:72:boolean hasFreeStatus() -> Code
    82:82:com.plectix.simulator.staticanalysis.Site getConnectedSite() -> Code
    90:93:void connectSite(com.plectix.simulator.staticanalysis.Site) -> Code
    100:101:void setStatusLink(com.plectix.simulator.staticanalysis.LinkStatus) -> Code
    108:108:com.plectix.simulator.staticanalysis.LinkStatus getStatusLink() -> Code
    117:126:com.plectix.simulator.staticanalysis.LinkRank getStatusLinkRank() -> Code
    136:146:boolean equalz(com.plectix.simulator.staticanalysis.Link) -> Code
    157:179:boolean compare(com.plectix.simulator.staticanalysis.Link) -> V
com.plectix.simulator.staticanalysis.Link$1 -> com.com4$1:
    int[] $SwitchMap$com$plectix$simulator$staticanalysis$LinkStatus -> Code
com.plectix.simulator.staticanalysis.LinkRank -> com.I:
    com.plectix.simulator.staticanalysis.LinkRank BOUND_OR_FREE -> Code
    com.plectix.simulator.staticanalysis.LinkRank SEMI_LINK -> V
    com.plectix.simulator.staticanalysis.LinkRank BOUND -> I
    com.plectix.simulator.staticanalysis.LinkRank FREE -> Z
    int orderNumber -> Code
    com.plectix.simulator.staticanalysis.LinkRank[] $VALUES -> Code
    14:14:com.plectix.simulator.staticanalysis.LinkRank[] values() -> values
    14:14:com.plectix.simulator.staticanalysis.LinkRank valueOf(java.lang.String) -> valueOf
    33:33:boolean lessPriority(com.plectix.simulator.staticanalysis.LinkRank) -> Code
com.plectix.simulator.staticanalysis.LinkStatus -> com.af:
    com.plectix.simulator.staticanalysis.LinkStatus BOUND -> Code
    com.plectix.simulator.staticanalysis.LinkStatus WILDCARD -> V
    com.plectix.simulator.staticanalysis.LinkStatus FREE -> I
    com.plectix.simulator.staticanalysis.LinkStatus[] $VALUES -> Code
    14:14:com.plectix.simulator.staticanalysis.LinkStatus[] values() -> values
    14:14:com.plectix.simulator.staticanalysis.LinkStatus valueOf(java.lang.String) -> valueOf
com.plectix.simulator.staticanalysis.NamedEntity -> com.prN:
    java.lang.String getDefaultName() -> Code
    java.lang.String getName() -> V
    10:10:boolean hasDefaultName() -> V
    14:14:boolean hasSimilarName(com.plectix.simulator.staticanalysis.NamedEntity) -> Code
com.plectix.simulator.staticanalysis.ObservableConnectedComponent -> com.av:
    java.lang.String name -> Code
    java.lang.String line -> V
    int id -> Code
    java.util.List automorphicObservables -> Code
    java.util.List countList -> V
    boolean unique -> Code
    long lastInjectionsQuantity -> Code
    int mainAutomorphismNumber -> V
    64:64:int getId() -> Code
    68:68:int getMainAutomorphismNumber() -> V
    72:73:void setMainAutomorphismNumber(int) -> Code
    76:77:void addAutomorphicObservables(int) -> V
    80:80:java.lang.String getLine() -> Code
    84:85:void updateLastValue() -> a_
    88:92:void fixState$1385ff() -> V
    95:95:java.lang.String getName() -> V
    99:106:double getCurrentState(com.plectix.simulator.staticanalysis.Observables) -> Code
    110:115:java.lang.String getStringItem(int,com.plectix.simulator.staticanalysis.Observables) -> Code
    120:120:boolean isUnique() -> a_
    124:127:double getItem(int,com.plectix.simulator.staticanalysis.Observables) -> Code
    133:133:double getLastValue() -> Code
com.plectix.simulator.staticanalysis.Observables -> com.coN:
    boolean ocamlStyleObsName -> Code
    boolean unifiedTimeSeriesOutput -> V
    java.util.List countTimeList -> Code
    java.util.List connectedComponentList -> V
    java.util.List componentList -> I
    double timeNext -> Code
    double timeSampleMin -> V
    java.util.List componentListForXMLOutput -> Z
    54:77:void init(double,double,long,int,boolean) -> Code
    84:88:void resetLists() -> Code
    98:98:double getTimeSampleMin() -> Code
    108:108:java.util.List getCountTimeList() -> Code
    123:128:void initializeMinSampleTime(double,int) -> Code
    144:155:void calculateObs(double,long,boolean) -> Code
    159:179:void calculateExactSampleObs(double,long,boolean) -> V
    189:192:void calculateAll$1385ff() -> Z
    202:205:void updateLastValueAll() -> B
    226:230:void addToCountTimeList(double,long) -> Code
    251:266:void addConnectedComponents(java.util.List,java.lang.String,java.lang.String,int) -> Code
    283:292:boolean addRulesName(java.lang.String,int,java.util.List) -> Code
    301:316:void checkAutomorphisms() -> V
    321:321:java.util.List getComponentList() -> V
    325:336:java.util.List getUniqueComponentList() -> I
    340:340:java.util.List getConnectedComponentList() -> Z
    344:352:java.util.List getConnectedComponentListForXMLOutput() -> B
    356:357:void setOcamlStyleObsName(boolean) -> Code
    360:361:void setUnifiedTimeSeriesOutput(boolean) -> V
    364:367:void addInitialState() -> I
com.plectix.simulator.staticanalysis.Rule -> com.LPt1:
    com.plectix.simulator.util.io.PlxLogger LOGGER -> Code
    java.util.List leftHandside -> Code
    java.util.List rightHandside -> V
    java.lang.String ruleName -> Code
    java.util.List sitesConnectedWithDeleted -> I
    java.util.List sitesConnectedWithBroken -> Z
    boolean doesNothing -> Code
    int automorphismNumber -> Code
    boolean hasInfiniteRate -> V
    java.util.List activatedRules -> B
    java.util.List inhibitedRule -> C
    java.util.List activatedObservable -> S
    java.util.List inhibitedObservable -> F
    int ruleId -> V
    java.util.List actionList -> D
    java.util.Map agentAddList -> Code
    java.util.List injections -> L
    java.util.List changedActivatedSites -> a
    java.util.List changedInhibitedSites -> b
    double activity -> Code
    double rate -> V
    com.plectix.simulator.staticanalysis.stories.storage.NullEvent nullEvent -> Code
    com.plectix.simulator.simulationclasses.solution.RuleApplicationPoolInterface pool -> Code
    double additionalRate -> I
    boolean isBinary -> I
    156:170:boolean onlyOneBoundAction() -> Z
    181:185:void associateWithComponents(java.util.List) -> Code
    203:203:boolean doesNothing() -> Code
    213:213:boolean hasInfiniteRate() -> V
    222:223:void setInfinityRateFlag(boolean) -> Code
    244:245:void applyRuleForStories$2bfd5e3c(java.util.List,com.plectix.simulator.staticanalysis.stories.storage.EventBuilder,com.plectix.simulator.simulator.SimulationData) -> Code
    260:261:void applyRule(java.util.List,com.plectix.simulator.simulator.SimulationData) -> Code
    274:274:com.plectix.simulator.staticanalysis.Agent getAgentAdd(com.plectix.simulator.staticanalysis.Agent) -> Code
    288:289:void registerAddedAgent(com.plectix.simulator.staticanalysis.Agent,com.plectix.simulator.staticanalysis.Agent) -> Code
    310:331:void apply$2cebf232(java.util.List,com.plectix.simulator.simulationclasses.action.ActionObserverInteface,com.plectix.simulator.simulator.SimulationData) -> Code
    334:334:com.plectix.simulator.simulationclasses.solution.RuleApplicationPoolInterface getPool() -> Code
    338:341:void preparePool(com.plectix.simulator.simulator.SimulationData) -> Code
    348:391:void markRightHandSideAgents() -> I
    402:412:void sortAgentsByIdInRuleHandside(java.util.List) -> V
    418:429:void sortActionList() -> Z
    440:450:void addInhibitedChangedSite(com.plectix.simulator.staticanalysis.Site,boolean,boolean) -> Code
    456:502:void createActionList() -> B
    514:527:void addAllActions$1a4018a5(com.plectix.simulator.staticanalysis.Agent,com.plectix.simulator.interfaces.SolutionElementInterface) -> Code
    533:550:void calculateAutomorphismsNumber() -> C
    553:560:int factorial(int) -> Code
    568:588:void calculateActivity() -> Code
    596:596:java.lang.String getName() -> Code
    600:600:int getAutomorphismNumber() -> Code
    609:609:double getActivity() -> V
    619:620:void setActivity$133369() -> V
    629:632:java.util.List getLeftHandSide() -> Code
    643:646:java.util.List getRightHandSide() -> V
    661:669:com.plectix.simulator.simulationclasses.injections.Injection getInjectionBySiteToFromLHS(com.plectix.simulator.staticanalysis.Site) -> Code
    673:673:java.util.List getSitesConnectedWithBroken() -> I
    683:684:void addSiteConnectedWithBroken(com.plectix.simulator.staticanalysis.Site) -> Code
    687:687:java.util.List getSitesConnectedWithDeleted() -> Z
    691:692:void addSiteConnectedWithDeleted(com.plectix.simulator.staticanalysis.Site) -> V
    695:695:com.plectix.simulator.staticanalysis.Site getSiteConnectedWithDeleted(int) -> Code
    699:700:void removeSiteConnectedWithDeleted(int) -> Code
    703:704:void addAction(com.plectix.simulator.simulationclasses.action.Action) -> Code
    733:733:int getRuleId() -> V
    743:744:void setRuleID(int) -> V
    752:752:double getRate() -> I
    762:769:void setRuleRate(double) -> V
    777:777:java.util.List getActivatedObservable() -> B
    786:786:java.util.List getActivatedRules() -> C
    790:791:void addActivatedRule(com.plectix.simulator.staticanalysis.Rule) -> Code
    794:795:void addinhibitedRule(com.plectix.simulator.staticanalysis.Rule) -> V
    798:799:void addActivatedObs(com.plectix.simulator.interfaces.ObservableConnectedComponentInterface) -> Code
    802:803:void addinhibitedObs(com.plectix.simulator.interfaces.ObservableConnectedComponentInterface) -> V
    811:811:java.util.List getActionList() -> S
    816:816:double getWeight() -> Code
    820:821:void setAdditionalRate(double) -> I
    824:824:double getAdditionalRate() -> Z
    835:835:boolean bolognaWanted() -> I
    840:850:void positiveUpdate(java.util.List,java.util.List) -> Code
    854:857:java.lang.String toString() -> toString
com.plectix.simulator.staticanalysis.RuleApplicator -> com.PRn:
    com.plectix.simulator.simulator.SimulationData simulationData -> Code
    com.plectix.simulator.interfaces.RandomInterface random -> Code
    21:58:java.util.List applyRule(com.plectix.simulator.staticanalysis.Rule,java.util.List,com.plectix.simulator.simulator.SimulationData) -> Code
    63:67:boolean performReactionWithProba(com.plectix.simulator.simulationclasses.bologna.Reaction,double) -> Code
    21:41:java.util.List formConnectedComponents(java.util.Collection) -> Code
    46:60:void findConnectedComponent(com.plectix.simulator.staticanalysis.Agent,java.util.List,java.util.List) -> Code
com.plectix.simulator.staticanalysis.Site -> com.com2:
    java.lang.String name -> Code
    com.plectix.simulator.staticanalysis.Link linkState -> Code
    com.plectix.simulator.staticanalysis.InternalState internalState -> Code
    com.plectix.simulator.staticanalysis.Agent parentAgent -> Code
    int linkIndex -> Code
    java.util.Set liftElements -> Code
    54:55:void addToLift(com.plectix.simulator.simulationclasses.injections.LiftElement) -> Code
    62:62:java.util.Set getLift() -> Code
    71:75:java.util.List getInjectionFromLift$75edf3f2(com.plectix.simulator.interfaces.SolutionElementInterface) -> Code
    83:83:com.plectix.simulator.staticanalysis.Link getLinkState() -> Code
    91:94:void setParentAgent(com.plectix.simulator.staticanalysis.Agent) -> Code
    101:101:com.plectix.simulator.staticanalysis.Agent getParentAgent() -> Code
    109:110:void setInternalState(com.plectix.simulator.staticanalysis.InternalState) -> Code
    117:117:com.plectix.simulator.staticanalysis.InternalState getInternalState() -> Code
    129:144:boolean equalz(com.plectix.simulator.staticanalysis.Site) -> Code
    157:167:boolean expandedEqualz(com.plectix.simulator.staticanalysis.Site,boolean) -> Code
    178:179:void setLinkIndex(int) -> Code
    187:187:int getLinkIndex() -> Code
    196:196:java.lang.String getName() -> V
    203:204:void clearLifts() -> Code
    211:222:void clearIncomingInjections(com.plectix.simulator.simulationclasses.injections.Injection) -> Code
    229:235:void removeInjectionFromLift(com.plectix.simulator.simulationclasses.injections.Injection) -> V
    239:243:com.plectix.simulator.staticanalysis.Site clone() -> Code
    248:248:java.lang.String toString() -> toString
    253:253:java.lang.String getDefaultName() -> Code
    17:17:java.lang.Object clone() -> clone
com.plectix.simulator.staticanalysis.Snapshot -> com.Com3:
    int totalAgents -> Code
    int smollestConnectedComponent -> V
    int largestConnectedComponent -> I
    int uniqueConnectedComponent -> Z
    java.util.List snapshotElements -> Code
    double snapshotTime -> Code
    54:72:void addComponent$3dd7f051(com.plectix.simulator.interfaces.SolutionElementInterface,long) -> Code
    78:78:double getSnapshotTime() -> Code
    85:85:java.util.List getSnapshotElements() -> Code
    13:34:void buildCorrespondence(java.util.Map,java.util.ArrayList,java.util.ArrayList) -> Code
com.plectix.simulator.staticanalysis.SnapshotElement -> com.i:
    long count -> Code
    com.plectix.simulator.interfaces.SolutionElementInterface connectedComponent$4b9597c0 -> Code
    java.lang.String ccName -> Code
    33:33:long getCount() -> Code
    41:41:java.lang.String getComponentsName() -> Code
    52:64:boolean exists$695c1db9(com.plectix.simulator.interfaces.SolutionElementInterface) -> Code
    72:73:void eraseConnectedComponent() -> Code
com.plectix.simulator.staticanalysis.SpanningTree -> com.com8:
    java.util.List[] vertices -> Code
    int rootIndex -> Code
    boolean[] newVertex -> Code
    33:36:void resetNewVertex() -> Code
    44:44:boolean getNewVertexElement(int) -> Code
    52:52:int getRootIndex() -> Code
    60:60:java.util.List[] getVertexes() -> Code
    68:69:void setTrue(int) -> Code
    77:90:void depthFirstSearch(com.plectix.simulator.staticanalysis.Agent) -> Code
com.plectix.simulator.staticanalysis.abstracting.AbstractAgent -> com.lPT2:
    com.plectix.simulator.staticanalysis.abstracting.AbstractSite defaultSite -> Code
    java.lang.String name -> Code
    java.util.Map sitesMap -> Code
    89:89:com.plectix.simulator.staticanalysis.abstracting.AbstractSite getDefaultSite() -> Code
    99:99:java.lang.String getKey() -> I
    108:108:java.util.Map getSitesMap() -> Code
    119:119:com.plectix.simulator.staticanalysis.abstracting.AbstractSite getSiteByName(java.lang.String) -> Code
    129:130:void addSite(com.plectix.simulator.staticanalysis.abstracting.AbstractSite) -> Code
    139:144:void addModelSite(com.plectix.simulator.staticanalysis.abstracting.AbstractSite) -> V
    157:162:boolean includedInCollectionByName(java.util.Collection) -> Code
    221:221:java.lang.String getName() -> V
    234:239:boolean includedInCollection(java.util.Collection) -> V
    243:245:void addAllStates(com.plectix.simulator.staticanalysis.Agent) -> Code
    248:250:void addAllStates(com.plectix.simulator.staticanalysis.abstracting.AbstractAgent) -> Code
    253:271:com.plectix.simulator.staticanalysis.abstracting.AbstractAgent summon(com.plectix.simulator.staticanalysis.abstracting.AbstractAgent) -> Code
    283:294:boolean isFit(com.plectix.simulator.staticanalysis.abstracting.AbstractAgent) -> Code
    299:310:boolean isFitTwo(com.plectix.simulator.staticanalysis.abstracting.AbstractAgent) -> V
    314:335:java.lang.String toStringForXML() -> Z
    340:341:java.lang.String toString() -> toString
    346:346:com.plectix.simulator.staticanalysis.abstracting.AbstractAgent clone() -> Code
    351:351:java.lang.String getDefaultName() -> Code
    20:20:java.lang.Object clone() -> clone
com.plectix.simulator.staticanalysis.abstracting.AbstractLinkState -> com.Com6:
    com.plectix.simulator.staticanalysis.LinkRank statusLinkRank -> Code
    com.plectix.simulator.staticanalysis.LinkStatus statusLink -> Code
    java.lang.String connectedSiteName -> Code
    java.lang.String agentName -> V
    57:62:void setStatusLink(com.plectix.simulator.staticanalysis.LinkStatus) -> Code
    69:70:void setLinkSiteName(java.lang.String) -> Code
    77:78:void setAgentName(java.lang.String) -> V
    86:95:com.plectix.simulator.staticanalysis.LinkRank getStatusLinkRank() -> Code
    104:104:com.plectix.simulator.staticanalysis.LinkStatus getStatusLink() -> Code
    112:112:java.lang.String getConnectedSiteName() -> Code
    120:120:java.lang.String getAgentName() -> V
    124:126:void setDefaultNames() -> Z
    131:134:void setFreeLinkState() -> Code
    137:140:void setWildLinkState() -> V
    143:146:void setSemiLink() -> I
    161:178:boolean equalz(com.plectix.simulator.staticanalysis.abstracting.AbstractLinkState) -> Code
    190:210:boolean compareLinkStates(com.plectix.simulator.staticanalysis.abstracting.AbstractLinkState) -> V
    214:214:boolean isLeftBranchStatus() -> Code
    218:218:boolean isRightBranchStatus() -> V
com.plectix.simulator.staticanalysis.abstracting.AbstractLinkState$1 -> com.Com6$1:
    int[] $SwitchMap$com$plectix$simulator$staticanalysis$LinkStatus -> Code
com.plectix.simulator.staticanalysis.abstracting.AbstractSite -> com.aa:
    java.lang.String name -> Code
    com.plectix.simulator.staticanalysis.abstracting.AbstractLinkState linkState -> Code
    com.plectix.simulator.staticanalysis.InternalState internalState -> Code
    com.plectix.simulator.staticanalysis.abstracting.AbstractAgent parentAgent -> Code
    74:74:com.plectix.simulator.staticanalysis.InternalState getInternalState() -> Code
    83:83:com.plectix.simulator.staticanalysis.abstracting.AbstractLinkState getLinkState() -> Code
    93:93:java.lang.String getName() -> V
    102:102:com.plectix.simulator.staticanalysis.abstracting.AbstractAgent getParentAgent() -> Code
    112:113:void setParentAgent(com.plectix.simulator.staticanalysis.abstracting.AbstractAgent) -> Code
    125:142:boolean equalz(com.plectix.simulator.staticanalysis.abstracting.AbstractSite) -> Code
    155:162:boolean isFit(com.plectix.simulator.staticanalysis.abstracting.AbstractSite) -> V
    166:172:void addStates(com.plectix.simulator.staticanalysis.Site) -> Code
    175:183:void addStates(com.plectix.simulator.staticanalysis.abstracting.AbstractSite) -> Code
    186:187:void setLinkState(com.plectix.simulator.staticanalysis.abstracting.AbstractLinkState) -> Code
    191:210:java.lang.String toString() -> toString
    215:216:com.plectix.simulator.staticanalysis.abstracting.AbstractSite clone() -> Code
    221:221:java.lang.String getDefaultName() -> Code
    14:14:java.lang.Object clone() -> clone
com.plectix.simulator.staticanalysis.contactmap.ContactMap -> com.CON:
    com.plectix.simulator.staticanalysis.contactmap.ContactMapMode mode -> Code
    com.plectix.simulator.simulationclasses.solution.SolutionFactory kappaSystem$6bacc877 -> Code
    com.plectix.simulator.staticanalysis.contactmap.ContactMapAbstractSolution abstractSolution -> Code
    com.plectix.simulator.staticanalysis.Rule focusRule -> Code
    boolean isInitialized -> Code
    39:40:void setMode(com.plectix.simulator.staticanalysis.contactmap.ContactMapMode) -> Code
    48:48:com.plectix.simulator.staticanalysis.contactmap.ContactMapAbstractSolution getAbstractSolution() -> Code
    58:59:void setSimulationData$3b45d6dc(com.plectix.simulator.simulationclasses.solution.SolutionFactory) -> Code
    69:70:void setFocusRule(com.plectix.simulator.staticanalysis.Rule) -> Code
    127:151:java.util.List getSideEffect(com.plectix.simulator.staticanalysis.abstracting.AbstractSite) -> Code
    156:162:void fillingContactMap$d7ed0f5(java.util.List,com.plectix.simulator.staticanalysis.subviews.AllSubViewsOfAllAgentsInterface,com.plectix.simulator.simulationclasses.solution.SolutionFactory) -> Code
    165:165:boolean isInitialized() -> Code
    169:169:com.plectix.simulator.staticanalysis.contactmap.ContactMapMode getMode() -> Code
com.plectix.simulator.staticanalysis.contactmap.ContactMap$1 -> com.CON$1:
    int[] $SwitchMap$com$plectix$simulator$staticanalysis$contactmap$ContactMapMode -> Code
com.plectix.simulator.staticanalysis.contactmap.ContactMapAbstractEdge -> com.lpt1:
    com.plectix.simulator.staticanalysis.abstracting.AbstractSite sourceVertex -> Code
    java.lang.String targetVertexSiteName -> Code
    java.lang.String targetVertexAgentName -> V
    java.util.Set rules -> Code
    24:24:com.plectix.simulator.staticanalysis.abstracting.AbstractSite getSourceVertex() -> Code
    28:28:java.lang.String getTargetVertexSiteName() -> Code
    32:32:java.lang.String getTargetVertexAgentName() -> V
    36:36:java.util.Set getRules() -> Code
    40:57:boolean equalz(com.plectix.simulator.staticanalysis.contactmap.ContactMapAbstractEdge) -> Code
    61:62:void addRules(int) -> Code
com.plectix.simulator.staticanalysis.contactmap.ContactMapAbstractSolution -> com.Lpt6:
    java.util.Map agentNameToAgent -> Code
    java.util.Map agentNameToAgents -> V
    java.util.Map agentsMap -> I
    java.util.Map edgesInContactMap -> Z
    java.util.Map agentsInContactMap -> B
    com.plectix.simulator.simulationclasses.solution.SolutionFactory kappaSystem$6bacc877 -> Code
    45:56:java.util.Collection getSolutionAgents() -> Code
    61:77:void addToEdgesAndAgentsMap(com.plectix.simulator.staticanalysis.abstracting.AbstractAgent) -> Code
    81:87:void addToEdgesAndAgentsMap(java.lang.Integer,com.plectix.simulator.staticanalysis.abstracting.AbstractAgent) -> Code
    91:121:void fillMaps(java.lang.Integer,com.plectix.simulator.staticanalysis.abstracting.AbstractAgent,java.lang.String,java.util.Map) -> Code
    166:174:void fillModelMapOfAgents(java.util.Collection) -> V
    177:190:void fillModelMapByAgentList(java.util.Collection) -> I
    193:198:void fillAgentMap(java.util.Collection) -> Z
    201:217:boolean addAgentToAgentsMap(com.plectix.simulator.staticanalysis.abstracting.AbstractAgent) -> Code
    236:248:void addData(java.util.List) -> Code
    261:275:void constructAbstractCard(java.util.List,java.util.Collection) -> Code
    283:296:void clearCard(java.util.Collection) -> Code
    308:324:java.util.List fillAgentsFromRule(com.plectix.simulator.staticanalysis.Rule) -> Code
    328:337:void addAllRules(java.util.List) -> V
    343:343:java.util.Map getEdgesInContactMap() -> Code
    347:347:java.util.Map getAgentNameToAgent() -> V
    351:351:java.util.Map getAgentsInContactMap() -> I
    355:355:java.util.Map getAgentNameToAgentsList() -> Z
com.plectix.simulator.staticanalysis.contactmap.ContactMapChangedSite -> com.C:
    com.plectix.simulator.staticanalysis.abstracting.AbstractSite site -> Code
    boolean hasLinkState -> Code
    boolean hasInternalState -> V
    java.util.List usedRulesIds -> Code
    23:23:boolean hasLinkState() -> Code
    27:27:boolean hasInternalState() -> V
    31:37:void setLinkState(com.plectix.simulator.staticanalysis.abstracting.AbstractSite) -> Code
    40:46:void setInternalState(com.plectix.simulator.staticanalysis.abstracting.AbstractSite) -> V
    50:50:java.util.List getUsedRuleIDs() -> Code
    54:54:com.plectix.simulator.staticanalysis.abstracting.AbstractSite getSite() -> Code
    58:60:void addRules(int) -> Code
com.plectix.simulator.staticanalysis.contactmap.ContactMapMode -> com.M:
    com.plectix.simulator.staticanalysis.contactmap.ContactMapMode MODEL -> Code
    com.plectix.simulator.staticanalysis.contactmap.ContactMapMode AGENT_OR_RULE -> V
    com.plectix.simulator.staticanalysis.contactmap.ContactMapMode[] $VALUES -> Code
    10:10:com.plectix.simulator.staticanalysis.contactmap.ContactMapMode[] values() -> values
    10:10:com.plectix.simulator.staticanalysis.contactmap.ContactMapMode valueOf(java.lang.String) -> valueOf
com.plectix.simulator.staticanalysis.cycledetection.Detector -> com.F:
    com.plectix.simulator.staticanalysis.subviews.AllSubViewsOfAllAgentsInterface subViews -> Code
    java.util.List listOfAgents -> Code
    26:79:java.util.List extractCycles() -> Code
com.plectix.simulator.staticanalysis.cycledetection.EdgeFromContactMap -> com.B:
com.plectix.simulator.staticanalysis.cycledetection.NodeFromContactMap -> com.COm3:
com.plectix.simulator.staticanalysis.graphs.Edge -> com.pRN:
    com.plectix.simulator.staticanalysis.graphs.Vertex firstVertex -> Code
    com.plectix.simulator.staticanalysis.graphs.Vertex lastVertex -> V
    13:13:com.plectix.simulator.staticanalysis.graphs.Vertex getSource() -> Code
    17:17:com.plectix.simulator.staticanalysis.graphs.Vertex getTarget() -> V
    21:22:void setTarget(com.plectix.simulator.staticanalysis.graphs.Vertex) -> Code
    25:26:void setSource(com.plectix.simulator.staticanalysis.graphs.Vertex) -> V
    24:51:java.util.ArrayList shadowClone(java.util.ArrayList) -> Code
    55:65:void cloneSitesAndIdsInComponent(com.plectix.simulator.staticanalysis.Agent,com.plectix.simulator.staticanalysis.Agent) -> Code
    69:81:java.util.List addAllVariants(java.util.List,java.util.Set) -> Code
    87:94:java.util.List addAllVariants(java.util.Set,java.util.Set) -> Code
    99:131:void shadowClone(java.util.Map,java.util.Map) -> Code
    154:158:com.plectix.simulator.staticanalysis.abstracting.AbstractAgent buildAgentBySite(com.plectix.simulator.staticanalysis.abstracting.AbstractSite) -> Code
    162:166:com.plectix.simulator.staticanalysis.abstracting.AbstractAgent clone(com.plectix.simulator.staticanalysis.Agent) -> Code
    170:195:java.util.ArrayList cloneListOfAgents(java.util.List) -> Code
    201:228:boolean uniqueConponent(com.plectix.simulator.staticanalysis.abstracting.AbstractSite,com.plectix.simulator.staticanalysis.localviews.LocalViewsMain) -> Code
com.plectix.simulator.staticanalysis.graphs.Graph -> com.lPt6:
    java.util.LinkedList edges -> Code
    java.util.ArrayList vertices -> Code
    boolean $assertionsDisabled -> Code
    24:48:java.util.List getAllEdgesInDirectedCycles() -> Code
    81:86:int needExploreMore() -> Code
    92:99:void extractCycle(com.plectix.simulator.staticanalysis.graphs.Vertex,com.plectix.simulator.staticanalysis.graphs.Vertex,java.util.LinkedList,java.util.Stack) -> Code
    102:109:void addEdgeToAnswer(java.util.LinkedList,com.plectix.simulator.staticanalysis.graphs.Vertex,com.plectix.simulator.staticanalysis.graphs.Vertex) -> Code
    126:150:java.util.ArrayList getAllWeakClosureComponent() -> Code
    154:170:void sortVerticesByOutDegree() -> Code
    182:185:void clearTags() -> V
    240:241:void addVertex(com.plectix.simulator.staticanalysis.graphs.Vertex) -> Code
    244:248:com.plectix.simulator.staticanalysis.graphs.Edge getEdge(com.plectix.simulator.staticanalysis.graphs.Vertex,com.plectix.simulator.staticanalysis.graphs.Vertex) -> Code
    265:272:int computeBinaryLog(int) -> Code
    276:283:void addEdge(com.plectix.simulator.staticanalysis.graphs.Edge) -> Code
com.plectix.simulator.staticanalysis.graphs.Vertex -> com.com6:
    java.util.LinkedList edges -> Code
    java.util.LinkedList neighbourVertices -> V
    com.plectix.simulator.staticanalysis.graphs.Vertex parentVertex -> Code
    boolean tag -> Code
    int explored -> Code
    boolean mark2 -> V
    22:23:void setTag(boolean) -> Code
    26:26:boolean isTag() -> Code
    30:40:com.plectix.simulator.staticanalysis.graphs.Vertex next() -> Code
    45:46:void setParentVertex(com.plectix.simulator.staticanalysis.graphs.Vertex) -> Code
    49:49:com.plectix.simulator.staticanalysis.graphs.Vertex getParentVertex() -> V
    53:54:void setMark2$1385ff() -> Code
    57:57:boolean isMark2() -> V
    61:62:void removeEdge(com.plectix.simulator.staticanalysis.graphs.Edge) -> Code
    65:66:void addEdge(com.plectix.simulator.staticanalysis.graphs.Edge) -> V
    69:70:void clearEdges() -> V
    73:74:void setExplored$13462e() -> I
    81:81:java.util.List getEdges() -> Code
    85:85:java.util.LinkedList getNeighbourVertices() -> Code
    89:90:void removeNeighbour(com.plectix.simulator.staticanalysis.graphs.Vertex) -> V
    93:94:void addNeighbourVertex(com.plectix.simulator.staticanalysis.graphs.Vertex) -> I
com.plectix.simulator.staticanalysis.influencemap.InfluenceMap -> com.COM7:
    java.util.Map activationMap -> Code
    java.util.Map activationMapObservables -> V
    java.util.Map inhibitionMap -> I
    java.util.Map inhibitionMapObservables -> Z
    java.util.Map observbableRules -> B
    void initInfluenceMap(java.util.List,com.plectix.simulator.staticanalysis.Observables,com.plectix.simulator.staticanalysis.contactmap.ContactMap,java.util.Map) -> Code
    34:42:java.util.List getActivationByRule(java.lang.Integer) -> Code
    47:74:void fillActivatedInhibitedRules$64dbe4f0$222d9875(java.util.List,com.plectix.simulator.simulationclasses.solution.SolutionFactory) -> Code
    77:77:java.util.Map getActivationMap() -> Code
    81:81:java.util.Map getActivationMapObservables() -> V
    85:85:java.util.Map getInhibitionMap() -> I
    89:89:java.util.Map getInhibitionMapObservables() -> Z
    93:93:java.util.Map getObservbableRules() -> B
    98:99:void setObservbableRules(java.util.Map) -> Code
com.plectix.simulator.staticanalysis.influencemap.InfluenceMapEdge -> com.Lpt8:
    int sourceRule -> Code
    int targetRule -> V
    13:13:int getTargetRule() -> Code
    18:18:java.lang.String toString() -> toString
com.plectix.simulator.staticanalysis.influencemap.future.InfluenceMapWithFuture -> com.LpT2:
    33:57:void initInfluenceMap(java.util.List,com.plectix.simulator.staticanalysis.Observables,com.plectix.simulator.staticanalysis.contactmap.ContactMap,java.util.Map) -> Code
    78:153:void fillingActivatedAndInhibitedSites(java.util.List,java.util.List,com.plectix.simulator.staticanalysis.contactmap.ContactMap,com.plectix.simulator.staticanalysis.subviews.base.AbstractionRule,java.util.Map) -> Code
    160:174:void findSideEffect(com.plectix.simulator.staticanalysis.abstracting.AbstractAgent,java.util.LinkedHashSet,com.plectix.simulator.staticanalysis.contactmap.ContactMap,java.util.List,java.util.List,java.util.Map) -> Code
    179:187:void fillingMap(java.util.Map,java.util.List,int,int,java.util.List) -> Code
    227:227:boolean isLinkStateHasSideEffect(com.plectix.simulator.staticanalysis.abstracting.AbstractSite) -> Code
com.plectix.simulator.staticanalysis.influencemap.future.InfluenceMapWithFuture$1 -> com.LpT2$1:
    int[] $SwitchMap$com$plectix$simulator$staticanalysis$subviews$base$AbstractActionType -> Code
com.plectix.simulator.staticanalysis.influencemap.future.MarkAgentWithFuture -> com.ab:
    com.plectix.simulator.staticanalysis.abstracting.AbstractAgent agent -> Code
    java.lang.String siteName -> Code
    com.plectix.simulator.simulationclasses.action.ActionType type -> Code
    33:33:com.plectix.simulator.simulationclasses.action.ActionType getType() -> Code
    37:37:com.plectix.simulator.staticanalysis.abstracting.AbstractAgent getAgent() -> Code
    41:41:com.plectix.simulator.staticanalysis.abstracting.AbstractSite getSite() -> Code
com.plectix.simulator.staticanalysis.influencemap.nofuture.Action -> com.Q:
    com.plectix.simulator.staticanalysis.influencemap.nofuture.Action INTERNAL_STATE -> Code
    com.plectix.simulator.staticanalysis.influencemap.nofuture.Action LINK_STATE -> V
    com.plectix.simulator.staticanalysis.influencemap.nofuture.Action ALL -> I
    com.plectix.simulator.staticanalysis.influencemap.nofuture.Action[] $VALUES -> Code
    3:3:com.plectix.simulator.staticanalysis.influencemap.nofuture.Action[] values() -> values
    3:3:com.plectix.simulator.staticanalysis.influencemap.nofuture.Action valueOf(java.lang.String) -> valueOf
com.plectix.simulator.staticanalysis.influencemap.nofuture.InfluenceMapWithoutFuture -> com.COM8:
    30:44:void initInfluenceMap(java.util.List,com.plectix.simulator.staticanalysis.Observables,com.plectix.simulator.staticanalysis.contactmap.ContactMap,java.util.Map) -> Code
    50:139:void fillingActivatedAndInhibitedSites(java.util.Map,java.util.Map,com.plectix.simulator.staticanalysis.contactmap.ContactMap,com.plectix.simulator.staticanalysis.subviews.base.AbstractionRule,java.util.Map) -> Code
    143:148:com.plectix.simulator.staticanalysis.influencemap.nofuture.MarkAgentWithoutFuture getMarkAgent(java.util.Map,com.plectix.simulator.staticanalysis.abstracting.AbstractAgent) -> Code
    156:176:void findSideEffect(com.plectix.simulator.staticanalysis.abstracting.AbstractAgent,java.util.LinkedHashSet,com.plectix.simulator.staticanalysis.contactmap.ContactMap,java.util.Map,java.util.Map,java.util.Map) -> Code
    181:189:void initializeMap(java.util.Map,java.util.Map,int,int,com.plectix.simulator.staticanalysis.subviews.base.AbstractionRule) -> Code
    256:273:boolean intersectionLinkState(com.plectix.simulator.staticanalysis.abstracting.AbstractSite,com.plectix.simulator.staticanalysis.influencemap.nofuture.MarkSiteWithoutFuture) -> Code
    278:285:boolean intersectionInternalState(com.plectix.simulator.staticanalysis.abstracting.AbstractSite,com.plectix.simulator.staticanalysis.influencemap.nofuture.MarkSiteWithoutFuture) -> V
    289:289:boolean isLinkStateHasSideEffect(com.plectix.simulator.staticanalysis.abstracting.AbstractSite) -> Code
com.plectix.simulator.staticanalysis.influencemap.nofuture.InfluenceMapWithoutFuture$1 -> com.COM8$1:
    int[] $SwitchMap$com$plectix$simulator$staticanalysis$subviews$base$AbstractActionType -> Code
    int[] $SwitchMap$com$plectix$simulator$staticanalysis$influencemap$nofuture$Action -> V
com.plectix.simulator.staticanalysis.influencemap.nofuture.MarkAgentWithoutFuture -> com.lPT7:
    java.util.Map sitesMap -> Code
    13:19:void addMarkSite(com.plectix.simulator.staticanalysis.influencemap.nofuture.MarkSiteWithoutFuture) -> Code
    22:22:java.util.List getMarkSites(java.lang.String) -> Code
com.plectix.simulator.staticanalysis.influencemap.nofuture.MarkSiteWithoutFuture -> com.Com4:
    com.plectix.simulator.staticanalysis.abstracting.AbstractSite site -> Code
    com.plectix.simulator.staticanalysis.influencemap.nofuture.Action type -> Code
    21:21:com.plectix.simulator.staticanalysis.abstracting.AbstractSite getSite() -> Code
    25:25:com.plectix.simulator.staticanalysis.influencemap.nofuture.Action getType() -> Code
com.plectix.simulator.staticanalysis.localviews.LocalViewsMain -> com.com3:
    com.plectix.simulator.staticanalysis.subviews.AllSubViewsOfAllAgentsInterface subviews -> Code
    java.util.Map localViews -> Code
    24:47:void buildLocalViews() -> Code
    58:66:int getCountOfCoherentAgent(com.plectix.simulator.staticanalysis.abstracting.AbstractAgent) -> Code
    82:124:java.lang.String getObstructionSiteForCoherentAgentAndList(java.util.List,com.plectix.simulator.staticanalysis.abstracting.AbstractAgent) -> Code
    128:128:java.util.Map getLocalViews() -> Code
    132:137:java.util.List getCoherentAgents(com.plectix.simulator.staticanalysis.abstracting.AbstractAgent) -> Code
    13:18:java.lang.String toStringWithSetNumberOfSignificantDigits$52cdecda(double) -> Code
    23:36:java.lang.String toStringWithSetNumberOfSignificantDigitsForPositiveNumbers$52cdecda(double) -> V
com.plectix.simulator.staticanalysis.rulecompression.CompressionResults -> com.coM5:
    java.util.Map associations -> Code
    com.plectix.simulator.staticanalysis.rulecompression.RuleCompressionType type -> Code
    20:20:java.util.Set getAssociations() -> Code
    24:30:java.util.List getCompressedRules() -> Code
    34:34:com.plectix.simulator.staticanalysis.rulecompression.RuleCompressionType getCompressionType() -> Code
    15:47:java.util.List doNegativeUpdateForDeletedAgents(com.plectix.simulator.staticanalysis.Rule,java.util.List) -> Code
    51:55:void addToAgentList(java.util.List,com.plectix.simulator.staticanalysis.Agent) -> Code
    58:78:void doNegativeUpdate(java.util.List) -> Code
com.plectix.simulator.staticanalysis.rulecompression.QualitativeCompressor -> com.LPt8:
    com.plectix.simulator.staticanalysis.localviews.LocalViewsMain localViews -> Code
    java.util.Map groups -> Code
    25:28:void buildGroups(java.util.Collection) -> Code
    56:74:void compressGroups() -> Code
    78:78:com.plectix.simulator.staticanalysis.Rule getCompressedRule(com.plectix.simulator.staticanalysis.Rule) -> Code
    82:85:void setLocalViews() -> V
com.plectix.simulator.staticanalysis.rulecompression.QuantitativeCompressor -> com.ad:
    com.plectix.simulator.staticanalysis.localviews.LocalViewsMain localviews -> Code
    com.plectix.simulator.staticanalysis.Rule compressedRule -> Code
    java.util.Map mapAfter -> Code
    java.util.Map mapBefore -> V
    java.util.List removedList -> Code
    41:111:boolean compress(com.plectix.simulator.staticanalysis.Rule) -> Code
    115:139:void sortNumberInRuleHandSide() -> Code
    142:157:void sortAfter(java.util.List) -> Code
    160:178:void sortBefore(java.util.List) -> V
    181:190:boolean decreaseStates() -> Code
    199:234:boolean deleteEmptyEnds() -> V
    275:275:com.plectix.simulator.staticanalysis.Rule getCompressedRule() -> Code
    280:309:boolean decreaseInternalStatesAndFreeLinkStateToWild(com.plectix.simulator.staticanalysis.Agent,com.plectix.simulator.staticanalysis.Agent) -> Code
    316:355:boolean decreaseLinkState(com.plectix.simulator.staticanalysis.abstracting.AbstractAgent,com.plectix.simulator.staticanalysis.Site,boolean,int) -> Code
    365:374:boolean decreaseInternalState(com.plectix.simulator.staticanalysis.abstracting.AbstractAgent,com.plectix.simulator.staticanalysis.Site,int) -> Code
com.plectix.simulator.staticanalysis.rulecompression.RootedRule -> com.LpT6:
    java.util.List roots -> Code
    java.util.Map actionStringsByAgentIDInRuleHandSide -> Code
    java.util.Map mapAfter -> V
    java.util.Map mapBefore -> I
    com.plectix.simulator.staticanalysis.Rule rule -> Code
    50:67:void setRootsAndFullActionInfo(java.util.Set) -> Code
    76:93:java.util.Map findCorrespondenceToRule(com.plectix.simulator.staticanalysis.rulecompression.RootedRule) -> Code
    105:150:java.util.Map expand(java.util.Map,com.plectix.simulator.staticanalysis.rulecompression.RootedRule) -> Code
    183:188:java.lang.Integer getSecondRuleAction(java.util.List,java.util.Map) -> Code
    192:201:java.util.Set getNeighboorsSites(com.plectix.simulator.staticanalysis.rulecompression.ShadowAgent) -> Code
    209:254:void rangeAgentsFromRoots() -> Code
    263:263:java.util.Map getMapBefore() -> Code
    267:267:java.util.Map getMapAfter() -> V
    271:272:void setRule(com.plectix.simulator.staticanalysis.Rule) -> Code
    275:275:com.plectix.simulator.staticanalysis.Rule getRule() -> Code
    279:283:java.util.List getRoots() -> Code
    290:297:void fullTestActions() -> V
    300:330:void fullBreakActions() -> I
    333:358:void putStringForBreakAction(com.plectix.simulator.staticanalysis.rulecompression.ShadowAgent,com.plectix.simulator.staticanalysis.Site,com.plectix.simulator.staticanalysis.Site) -> Code
    361:366:void putStringToActionList(int,java.lang.String) -> Code
    369:423:void fullBoundActions() -> Z
    427:433:void putStringToBoundAction(com.plectix.simulator.staticanalysis.rulecompression.ShadowAgent,com.plectix.simulator.staticanalysis.Site,com.plectix.simulator.staticanalysis.Site,com.plectix.simulator.staticanalysis.Agent) -> Code
    436:455:void fullModifyActions() -> B
    458:469:void fullDeleteActions() -> C
    473:486:void fullAddActions() -> S
    489:502:java.lang.String getActionString(com.plectix.simulator.staticanalysis.rulecompression.ShadowAgent) -> Code
com.plectix.simulator.staticanalysis.rulecompression.RootedRulesGroup -> com.j:
    java.util.Map rulesAndGluingThem -> Code
    com.plectix.simulator.staticanalysis.rulecompression.RootedRule headerRule -> Code
    com.plectix.simulator.staticanalysis.rulecompression.RootedRule compressed -> V
    com.plectix.simulator.staticanalysis.localviews.LocalViewsMain localViews -> Code
    com.plectix.simulator.staticanalysis.rulecompression.ShadowAgent obstruction -> Code
    java.util.Set problemSites -> Code
    java.util.Set noProblemSites -> V
    java.util.List neededAgents -> Code
    java.lang.String obstructionSite -> Code
    48:53:boolean tryAdd(com.plectix.simulator.staticanalysis.rulecompression.RootedRule) -> Code
    58:111:void findCommonPart() -> Code
    119:139:void examineProblemSites() -> V
    144:166:java.util.Set probablyConnectedWith(com.plectix.simulator.staticanalysis.Site) -> Code
    235:255:void brushAgents(java.lang.Integer,com.plectix.simulator.staticanalysis.rulecompression.ShadowAgent) -> Code
    266:333:void generalize(com.plectix.simulator.staticanalysis.rulecompression.ShadowAgent,com.plectix.simulator.staticanalysis.Agent) -> Code
    337:360:boolean divide(java.util.Map) -> Code
    366:399:java.util.List featureDivider(java.lang.String,int) -> Code
    403:412:com.plectix.simulator.staticanalysis.rulecompression.RootedRulesGroup getNewGroup(java.util.List) -> Code
    420:435:void sortAfter(java.util.List) -> Code
    438:456:void sortBefore(java.util.List) -> V
    466:466:com.plectix.simulator.staticanalysis.Rule getCompressedRule() -> Code
    470:471:void setViews(com.plectix.simulator.staticanalysis.localviews.LocalViewsMain) -> Code
com.plectix.simulator.staticanalysis.rulecompression.RuleCompressionType -> com.W:
    com.plectix.simulator.staticanalysis.rulecompression.RuleCompressionType QUALITATIVE -> Code
    com.plectix.simulator.staticanalysis.rulecompression.RuleCompressionType QUANTITATIVE -> V
    java.lang.String string -> Code
    com.plectix.simulator.staticanalysis.rulecompression.RuleCompressionType[] $VALUES -> Code
    8:8:com.plectix.simulator.staticanalysis.rulecompression.RuleCompressionType[] values() -> values
    8:8:com.plectix.simulator.staticanalysis.rulecompression.RuleCompressionType valueOf(java.lang.String) -> valueOf
    20:20:java.lang.String toString() -> toString
com.plectix.simulator.staticanalysis.rulecompression.RuleCompressor -> com.aD:
    com.plectix.simulator.staticanalysis.localviews.LocalViewsMain localViews -> Code
    com.plectix.simulator.staticanalysis.rulecompression.RuleCompressionType type -> Code
    21:28:com.plectix.simulator.staticanalysis.rulecompression.CompressionResults compress(java.util.Collection) -> Code
    41:60:java.util.Map compressQuality(java.util.Collection) -> Code
com.plectix.simulator.staticanalysis.rulecompression.RuleMaster -> com.LPT4:
    java.util.Map mapAfter -> Code
    java.util.Map mapBefore -> V
    com.plectix.simulator.staticanalysis.Rule rule -> Code
    java.util.List leftComponents -> Code
    73:98:void findActionAgents() -> Code
    105:110:java.util.List getAllRootedVersions() -> Code
    138:150:java.util.List getAllPossibleRoots() -> V
com.plectix.simulator.staticanalysis.rulecompression.ShadowAgent -> com.Nul:
    boolean isActionAgent -> Code
    int range -> Code
    com.plectix.simulator.staticanalysis.Site siteToParentInTree -> Code
    com.plectix.simulator.staticanalysis.Agent realAgent -> Code
    23:24:void setRealAgent(com.plectix.simulator.staticanalysis.Agent) -> Code
    27:27:com.plectix.simulator.staticanalysis.Agent getRealAgent() -> Code
    31:32:void setRange(int) -> Code
    35:35:int getRange() -> Code
    39:40:void setActionAgent() -> Code
    43:43:boolean isActionAgent() -> Code
    47:48:void setSiteToParentInTree(com.plectix.simulator.staticanalysis.Site) -> Code
    51:51:com.plectix.simulator.staticanalysis.Site getParentInTree() -> Code
com.plectix.simulator.staticanalysis.speciesenumeration.Species -> com.lpT5:
    java.util.List instance -> Code
    java.util.Map availableListOfViews -> Code
    java.lang.String hashCode -> Code
    int numberOfInitiatedAgent -> Code
    93:99:void initiateAgent(com.plectix.simulator.staticanalysis.Agent,com.plectix.simulator.staticanalysis.abstracting.AbstractAgent) -> Code
    102:102:java.lang.String getHashCode() -> Code
    106:120:java.util.List propagate() -> Code
    129:160:java.util.ArrayList cloneInstance() -> Code
    164:177:java.util.List getMasks(com.plectix.simulator.staticanalysis.Agent) -> Code
    182:182:boolean isComplete() -> Code
com.plectix.simulator.staticanalysis.speciesenumeration.SpeciesEnumeration -> com.S:
    java.util.Map localViews -> Code
    java.util.Map species -> V
    boolean isUnbounded -> Code
    21:21:java.util.Map getSpecies() -> Code
    25:34:void enumerate() -> Code
    39:57:void buildSpeciesFromRoot(java.util.Map,com.plectix.simulator.staticanalysis.abstracting.AbstractAgent) -> Code
    60:61:void unbound() -> V
    64:64:boolean isUnbounded() -> Code
com.plectix.simulator.staticanalysis.stories.ActionOfAEvent -> com.LPt2:
    com.plectix.simulator.staticanalysis.stories.ActionOfAEvent TEST -> Code
    com.plectix.simulator.staticanalysis.stories.ActionOfAEvent MODIFICATION -> V
    com.plectix.simulator.staticanalysis.stories.ActionOfAEvent TEST_AND_MODIFICATION -> I
    com.plectix.simulator.staticanalysis.stories.ActionOfAEvent[] $VALUES -> Code
    3:3:com.plectix.simulator.staticanalysis.stories.ActionOfAEvent[] values() -> values
    3:3:com.plectix.simulator.staticanalysis.stories.ActionOfAEvent valueOf(java.lang.String) -> valueOf
com.plectix.simulator.staticanalysis.stories.MarkOfEvent -> com.prn:
    com.plectix.simulator.staticanalysis.stories.MarkOfEvent UNRESOLVED -> Code
    com.plectix.simulator.staticanalysis.stories.MarkOfEvent KEPT -> V
    com.plectix.simulator.staticanalysis.stories.MarkOfEvent DELETED -> I
    com.plectix.simulator.staticanalysis.stories.MarkOfEvent[] $VALUES -> Code
    3:3:com.plectix.simulator.staticanalysis.stories.MarkOfEvent[] values() -> values
    3:3:com.plectix.simulator.staticanalysis.stories.MarkOfEvent valueOf(java.lang.String) -> valueOf
com.plectix.simulator.staticanalysis.stories.State -> com.cOm1:
    com.plectix.simulator.staticanalysis.stories.State FREE_LINK_STATE -> Code
    com.plectix.simulator.staticanalysis.stories.State BOUND_LINK_STATE -> V
    com.plectix.simulator.staticanalysis.stories.State CHECK_AGENT -> I
    com.plectix.simulator.staticanalysis.stories.State[] $VALUES -> Code
    3:3:com.plectix.simulator.staticanalysis.stories.State[] values() -> values
    3:3:com.plectix.simulator.staticanalysis.stories.State valueOf(java.lang.String) -> valueOf
com.plectix.simulator.staticanalysis.stories.Stories -> com.Com1:
    java.util.List observablesRulesIds -> Code
    java.util.Map eventsMapForCurrentStory -> Code
    com.plectix.simulator.staticanalysis.stories.storage.StoriesAgentTypesStorage storiesAgentTypesStorage -> Code
    com.plectix.simulator.simulator.SimulationArguments$StoryCompressionMode storifyMode -> Code
    48:57:void cleaningStory(int) -> Code
    70:71:void addToStories(java.util.List) -> Code
    75:77:void addEventToStory(int,com.plectix.simulator.staticanalysis.stories.storage.Event) -> Code
    82:84:void addLastEventToStoryStorifyRule(int,com.plectix.simulator.staticanalysis.stories.storage.Event,double) -> Code
    87:87:boolean checkRule$255f299(int) -> Code
    91:91:java.util.Map getEventsMapForCurrentStory() -> Code
    95:95:com.plectix.simulator.staticanalysis.stories.storage.StoriesAgentTypesStorage getStoriesAgentTypesStorage() -> Code
    18:24:java.lang.String getData(com.plectix.simulator.staticanalysis.Rule,boolean) -> Code
com.plectix.simulator.staticanalysis.stories.TypeOfWire -> com.o:
    com.plectix.simulator.staticanalysis.stories.TypeOfWire AGENT -> Code
    com.plectix.simulator.staticanalysis.stories.TypeOfWire INTERNAL_STATE -> V
    com.plectix.simulator.staticanalysis.stories.TypeOfWire LINK_STATE -> I
    com.plectix.simulator.staticanalysis.stories.TypeOfWire BOUND_FREE -> Z
    int id -> Code
    com.plectix.simulator.staticanalysis.stories.TypeOfWire[] $VALUES -> Code
    3:3:com.plectix.simulator.staticanalysis.stories.TypeOfWire[] values() -> values
    3:3:com.plectix.simulator.staticanalysis.stories.TypeOfWire valueOf(java.lang.String) -> valueOf
    13:13:int getId() -> Code
com.plectix.simulator.staticanalysis.stories.compressions.BoundSateIterator -> com.LPT2:
    com.plectix.simulator.staticanalysis.stories.State curState -> Code
    12:12:boolean hasNext() -> hasNext
    26:26:void remove() -> remove
    7:7:java.lang.Object next() -> next
com.plectix.simulator.staticanalysis.stories.compressions.CompressionPassport -> com.m:
    com.plectix.simulator.staticanalysis.stories.storage.WireStorageInterface storage -> Code
    java.util.Map iDsByType -> Code
    java.util.Map wiresByIdAgent -> V
    java.util.TreeMap allEventsByNumber -> Code
    java.util.LinkedHashMap typeById -> Code
    com.plectix.simulator.staticanalysis.stories.storage.SwapRecord swap -> Code
    658:658:com.plectix.simulator.staticanalysis.stories.storage.WireStorageInterface getStorage() -> Code
    643:647:com.plectix.simulator.staticanalysis.stories.storage.EventIteratorInterface eventIterator(boolean) -> Code
    638:638:java.util.Iterator agentTypeIterator() -> Code
    634:634:java.util.Iterator agentIterator(java.lang.String) -> Code
    654:654:java.util.ArrayList getAgentWires(long) -> Code
    172:175:java.lang.String getAgentType(long) -> Code
    179:210:boolean isAbleToSwap(long,long) -> Code
    139:152:com.plectix.simulator.staticanalysis.stories.storage.EventInterface swapAgents(java.util.List,java.util.List,java.lang.Long,boolean) -> Code
    167:169:void undoSwap() -> Code
    74:100:void removeEventWithMarkDelete() -> V
    630:630:int eventCount() -> Code
    662:662:java.util.TreeMap getAllEventsByNumber() -> Code
    42:71:void prepareForStrong() -> I
    105:134:void clearEmptyWires(java.util.LinkedHashSet) -> Code
    215:230:void doSwap(com.plectix.simulator.staticanalysis.stories.storage.SwapRecord) -> Code
    245:270:java.util.Set correctLinkStates(com.plectix.simulator.staticanalysis.stories.storage.SwapRecord,int) -> Code
    278:374:void correctWire$18979057(java.util.NavigableMap,java.util.Map) -> Code
    478:561:java.util.HashSet collectWires(com.plectix.simulator.staticanalysis.stories.storage.SwapRecord,int,boolean) -> Code
    566:570:com.plectix.simulator.staticanalysis.stories.storage.WireHashKey createWireByStateOfLink(com.plectix.simulator.staticanalysis.stories.storage.StateOfLink) -> Code
com.plectix.simulator.staticanalysis.stories.compressions.Compressor -> com.AUX:
    com.plectix.simulator.staticanalysis.stories.storage.WireStorageInterface storage -> Code
    17:28:void execute(com.plectix.simulator.simulator.SimulationArguments$StoryCompressionMode) -> Code
    12:21:void checkString(java.lang.String,java.lang.String,com.plectix.simulator.parser.KappaFileLine) -> Code
    25:32:java.lang.String parseRuleName(java.lang.String) -> Code
    36:36:java.lang.String listToString(java.util.List) -> Code
    40:52:java.lang.String listToString(java.util.List,java.lang.String) -> Code
com.plectix.simulator.staticanalysis.stories.compressions.Compressor$1 -> com.AUX$1:
    int[] $SwitchMap$com$plectix$simulator$simulator$SimulationArguments$StoryCompressionMode -> Code
com.plectix.simulator.staticanalysis.stories.compressions.LinkStateIterator -> com.Aux:
    java.util.Iterator stateIterator -> Code
    com.plectix.simulator.staticanalysis.stories.storage.StateOfLink freeLinkState -> Code
    20:20:boolean hasNext() -> hasNext
    37:37:void remove() -> remove
    8:8:java.lang.Object next() -> next
com.plectix.simulator.staticanalysis.stories.compressions.QueueEntry -> com.lpT4:
    com.plectix.simulator.staticanalysis.stories.storage.EventInterface event -> Code
    int queueSize -> V
    int stackSize -> I
    int queuePosIdx -> Z
    int currentWireIdx -> Code
    37:37:com.plectix.simulator.staticanalysis.stories.storage.EventInterface getEvent() -> Code
    41:41:int getWireCount() -> Code
    45:45:com.plectix.simulator.staticanalysis.stories.TypeOfWire getWireType() -> Code
    49:49:int getQueueSize() -> V
    53:53:int getQueuePosIdx() -> I
    57:57:int getStackSize() -> Z
com.plectix.simulator.staticanalysis.stories.compressions.StackEntry -> com.coM7:
    int wireIdx -> Code
    java.lang.Object frozenState -> Code
    java.util.Iterator stateIterator -> Code
    boolean hasNextState -> Code
    36:36:int getWireIdx() -> Code
    40:42:boolean hasNextState() -> Code
    46:51:java.lang.Object nextState() -> Code
    62:98:void checkFrozenState(com.plectix.simulator.staticanalysis.stories.compressions.WeakCompression) -> Code
    103:137:void detectFrozenState(com.plectix.simulator.staticanalysis.stories.storage.WireStorageInterface,long,com.plectix.simulator.staticanalysis.stories.storage.WireHashKey,boolean) -> Code
com.plectix.simulator.staticanalysis.stories.compressions.StackEntry$1 -> com.coM7$1:
    int[] $SwitchMap$com$plectix$simulator$staticanalysis$stories$TypeOfWire -> Code
    int[] $SwitchMap$com$plectix$simulator$staticanalysis$stories$ActionOfAEvent -> V
com.plectix.simulator.staticanalysis.stories.compressions.StrongCompression -> com.cOM1:
    com.plectix.simulator.staticanalysis.stories.compressions.CompressionPassport passport -> Code
    com.plectix.simulator.staticanalysis.stories.compressions.WeakCompression weak -> Code
    java.util.ArrayList agents1 -> Code
    java.util.ArrayList agents2 -> V
    31:64:void process() -> Code
    68:108:boolean lookThroughPerturbations(com.plectix.simulator.staticanalysis.stories.storage.EventInterface,boolean) -> Code
    112:117:boolean doesAgentMatter(com.plectix.simulator.staticanalysis.stories.storage.EventInterface,java.lang.Long) -> Code
    356:373:com.plectix.simulator.staticanalysis.stories.storage.StateOfLink getStateInSpace(com.plectix.simulator.staticanalysis.stories.storage.AtomicEvent) -> Code
com.plectix.simulator.staticanalysis.stories.compressions.StrongCompression$1 -> com.cOM1$1:
    int[] $SwitchMap$com$plectix$simulator$staticanalysis$stories$ActionOfAEvent -> Code
com.plectix.simulator.staticanalysis.stories.compressions.WalkResult -> com.cON:
    com.plectix.simulator.staticanalysis.stories.compressions.WalkResult DESIRED -> Code
    com.plectix.simulator.staticanalysis.stories.compressions.WalkResult FREE -> Z
    com.plectix.simulator.staticanalysis.stories.compressions.WalkResult NULL -> V
    com.plectix.simulator.staticanalysis.stories.compressions.WalkResult FAILED -> I
    com.plectix.simulator.staticanalysis.stories.compressions.WalkResult[] $VALUES -> Code
    21:21:com.plectix.simulator.staticanalysis.stories.compressions.WalkResult[] values() -> values
    21:21:com.plectix.simulator.staticanalysis.stories.compressions.WalkResult valueOf(java.lang.String) -> valueOf
com.plectix.simulator.staticanalysis.stories.compressions.WeakCompression -> com.Lpt2:
    com.plectix.simulator.staticanalysis.stories.storage.WireStorageInterface storage -> Code
    com.plectix.simulator.staticanalysis.stories.storage.MasterInformationAboutWires information -> Code
    int maxQueueSize -> Code
    boolean maxQueueSizeReached -> Code
    java.lang.Long upperGhostId -> Code
    java.lang.Long lowerGhostId -> V
    java.util.ArrayList uninvestigatedQueue -> Code
    java.util.Stack wireStack -> Code
    java.util.ArrayList candidatesToDelete -> V
    int currentNodeIdx -> V
    com.plectix.simulator.staticanalysis.stories.compressions.QueueEntry currentNode -> Code
    com.plectix.simulator.staticanalysis.stories.compressions.StackEntry topEntry -> Code
    48:48:boolean process() -> Code
    53:53:boolean processInconsistent(com.plectix.simulator.staticanalysis.stories.storage.EventInterface,com.plectix.simulator.staticanalysis.stories.storage.EventInterface) -> Code
    58:119:boolean doProcess(com.plectix.simulator.staticanalysis.stories.storage.EventInterface) -> Code
    235:253:com.plectix.simulator.staticanalysis.stories.storage.EventInterface selectEventToBranch(com.plectix.simulator.staticanalysis.stories.storage.EventInterface) -> Code
    259:333:boolean propagate(com.plectix.simulator.staticanalysis.stories.storage.EventInterface) -> V
    337:344:void pushEntry() -> Code
    347:347:com.plectix.simulator.staticanalysis.stories.storage.WireStorageInterface getStorage() -> Code
    351:351:com.plectix.simulator.staticanalysis.stories.storage.EventInterface getEvent() -> Code
    355:355:int getWireIdx() -> Code
    359:366:void decreaseQueue(int) -> Code
    369:371:void decreaseStack(int) -> V
    375:384:long getFirstEventId(boolean) -> Code
    390:394:com.plectix.simulator.staticanalysis.stories.ActionOfAEvent getRealType(com.plectix.simulator.staticanalysis.stories.storage.AtomicEvent) -> Code
    400:463:com.plectix.simulator.staticanalysis.stories.compressions.WalkResult walk(java.lang.Object,com.plectix.simulator.staticanalysis.stories.compressions.WalkResult) -> Code
    492:514:boolean isLastEvent() -> V
    521:569:com.plectix.simulator.staticanalysis.stories.compressions.WalkResult walkOnAgentWireSingleDiretion(boolean,boolean,com.plectix.simulator.staticanalysis.stories.compressions.WalkResult) -> Code
    573:573:com.plectix.simulator.staticanalysis.stories.compressions.WalkResult calcWalkResult(com.plectix.simulator.staticanalysis.stories.compressions.WalkResult) -> Code
    579:583:boolean deleteEvent(com.plectix.simulator.staticanalysis.stories.storage.EventInterface) -> I
    643:648:boolean isWalkSucceeded(java.lang.Object) -> Code
com.plectix.simulator.staticanalysis.stories.compressions.WeakCompression$1 -> com.Lpt2$1:
    int[] $SwitchMap$com$plectix$simulator$staticanalysis$stories$ActionOfAEvent -> Code
    int[] $SwitchMap$com$plectix$simulator$staticanalysis$stories$TypeOfWire -> V
com.plectix.simulator.staticanalysis.stories.graphs.BoundedCouple -> com.Lpt7:
    long firstAgentId -> Code
    long secondAgentId -> V
    java.lang.String firstSiteName -> Code
    java.lang.String secondSiteName -> V
    java.lang.Integer link -> Code
    java.lang.String firstInternalState -> I
    java.lang.String secondInternalState -> Z
    26:26:long getFirstAgentId() -> Code
    30:30:long getSecondAgentId() -> V
    34:35:void setLink(int) -> Code
    38:38:int getLink() -> Code
    42:43:void setFirstInternalState(java.lang.String) -> Code
    46:46:java.lang.String getFirstInternalState() -> Code
    50:51:void setSecondInternalState(java.lang.String) -> V
    54:54:java.lang.String getSecondInternalState() -> V
    58:58:boolean isSame(com.plectix.simulator.staticanalysis.stories.graphs.BoundedCouple) -> Code
    72:72:java.lang.String getFirstSite() -> I
    76:76:java.lang.String getSecondSite() -> Z
    81:88:boolean equals(java.lang.Object) -> equals
    98:109:int hashCode() -> hashCode
    113:113:int getResult(int,java.lang.Object) -> Code
com.plectix.simulator.staticanalysis.stories.graphs.Connection -> com.V:
    long source -> Code
    long target -> V
    15:15:long getFrom() -> Code
    19:19:long getTo() -> V
    24:29:boolean equals(java.lang.Object) -> equals
    34:37:int hashCode() -> hashCode
com.plectix.simulator.staticanalysis.stories.graphs.Connections -> com.nUL:
    java.util.Set connections -> Code
    java.util.TreeMap adjacentEdges -> Code
    16:23:void addConnection(long,long) -> Code
    26:34:boolean checkTansitive(long,long) -> Code
    38:38:java.util.Set getConnections() -> Code
    42:42:java.util.TreeMap getAdjacentEdges() -> Code
com.plectix.simulator.staticanalysis.stories.graphs.MergeStoriesGraphs -> com.A:
    com.plectix.simulator.staticanalysis.stories.Stories stories -> Code
    java.util.AbstractList listUniqueGraph -> Code
    int counter -> Code
    25:38:void merge() -> Code
    41:41:java.util.AbstractList getListUniqueGraph() -> Code
    118:134:java.util.TreeMap buildRuleGraph(com.plectix.simulator.staticanalysis.stories.graphs.StoriesGraphs,java.util.TreeMap) -> Code
com.plectix.simulator.staticanalysis.stories.graphs.Site -> com.Lpt4:
    java.lang.String name -> Code
    int linkIndex -> Code
    java.lang.String internalStateName -> V
    24:31:boolean equals(java.lang.Object) -> equals
    36:40:int hashCode() -> hashCode
    44:44:int getResult(int,java.lang.Object) -> Code
    49:60:java.lang.String toString() -> toString
com.plectix.simulator.staticanalysis.stories.graphs.StoriesGraphs -> com.n:
    java.util.TreeMap introAgentsToComponents -> Code
    java.util.TreeMap introComponentIdsData -> V
    java.util.TreeMap nodeIdToEventId -> I
    java.util.TreeMap nodeEventIdToNodeId -> Z
    java.util.TreeMap depths -> B
    com.plectix.simulator.staticanalysis.stories.graphs.Connections connections -> Code
    com.plectix.simulator.staticanalysis.stories.compressions.CompressionPassport passport -> Code
    37:40:int getEventDepth(long) -> Code
    44:44:com.plectix.simulator.staticanalysis.stories.graphs.Connections getConnections2() -> Code
    48:54:int getIntroDepth(long) -> V
    58:63:void buildGraph() -> Code
    67:84:void fillDepths() -> V
    138:162:void initializeInternalStates(com.plectix.simulator.staticanalysis.stories.storage.EventInterface,java.util.TreeMap) -> Code
    167:199:long initializeComponentsData(java.util.TreeMap) -> Code
    204:288:java.lang.String getText(java.util.Set) -> Code
    294:317:java.util.Set buildComponents(java.lang.Long,java.util.TreeMap,java.util.Set) -> Code
    321:331:void fillNodeIdMap(long) -> Code
    334:341:void fillConnections() -> I
    376:394:java.lang.Long getUpperNode(java.util.TreeMap,com.plectix.simulator.staticanalysis.stories.storage.WireHashKey,long) -> Code
    398:400:com.plectix.simulator.staticanalysis.stories.storage.EventInterface getEventByStepId(long) -> Code
    404:406:long getNodeIdByEventId(long) -> Code
    410:410:java.util.TreeMap getIntroComponentIdtoData() -> Code
    414:414:com.plectix.simulator.staticanalysis.stories.compressions.CompressionPassport getPassport() -> Code
    418:418:long getEventIdByNodeId(long) -> V
com.plectix.simulator.staticanalysis.stories.graphs.UniqueGraph -> com.at:
    com.plectix.simulator.staticanalysis.stories.graphs.StoriesGraphs graph -> Code
    int number -> Code
    double persent -> Code
    int commonQuantity -> V
    double time -> V
    double averageTime -> I
    21:21:com.plectix.simulator.staticanalysis.stories.graphs.StoriesGraphs getGraph() -> Code
    25:25:double getPersent() -> Code
    29:30:void updatePercent() -> V
    33:34:void updateAverageTime() -> I
    37:39:void incrementCount() -> Code
    42:44:void addAverageTime(double) -> Code
    47:47:double getAverageTime() -> V
com.plectix.simulator.staticanalysis.stories.storage.AbstractState -> com.q:
    java.lang.Object beforeState -> Code
    java.lang.Object afterState -> V
    14:19:void setBeforeState(java.lang.Object) -> Code
    22:23:void setAfterState(java.lang.Object) -> V
    26:26:java.lang.Object getBeforeState() -> Code
    30:30:java.lang.Object getAfterState() -> V
    39:44:java.lang.String toString() -> toString
    49:51:void setBeforeStateOver(java.lang.Object) -> I
com.plectix.simulator.staticanalysis.stories.storage.AbstractStorage$1 -> com.cOM3:
    int[] $SwitchMap$com$plectix$simulator$staticanalysis$stories$ActionOfAEvent -> Code
com.plectix.simulator.staticanalysis.stories.storage.AtomicEvent -> com.LPt7:
    com.plectix.simulator.staticanalysis.stories.ActionOfAEvent type -> Code
    com.plectix.simulator.staticanalysis.stories.storage.Event container -> Code
    com.plectix.simulator.staticanalysis.stories.storage.AbstractState state -> Code
    21:21:com.plectix.simulator.staticanalysis.stories.storage.AbstractState getState() -> Code
    25:25:com.plectix.simulator.staticanalysis.stories.ActionOfAEvent getType() -> Code
    29:29:com.plectix.simulator.staticanalysis.stories.storage.Event getContainer() -> Code
    33:37:void correctingType(com.plectix.simulator.staticanalysis.stories.ActionOfAEvent) -> Code
    40:45:com.plectix.simulator.staticanalysis.stories.storage.AtomicEvent cloneWithBefore(com.plectix.simulator.staticanalysis.stories.storage.Event) -> Code
    59:63:java.lang.String toString() -> toString
    5:5:java.lang.Object clone() -> clone
com.plectix.simulator.staticanalysis.stories.storage.Event -> com.PRN:
    com.plectix.simulator.staticanalysis.stories.MarkOfEvent mark -> Code
    java.util.ArrayList filter -> Code
    java.util.LinkedHashMap eventsMap -> Code
    long stepId -> Code
    int ruleId -> Code
    45:63:com.plectix.simulator.staticanalysis.stories.storage.AtomicEvent addAtomicEvent(com.plectix.simulator.staticanalysis.stories.storage.WireHashKey,com.plectix.simulator.staticanalysis.stories.ActionOfAEvent,com.plectix.simulator.staticanalysis.stories.TypeOfWire) -> Code
    67:67:long getStepId() -> Code
    71:71:int getRuleId() -> V
    75:75:java.util.LinkedHashMap getAtomicEvents() -> Code
    80:92:void setMark(com.plectix.simulator.staticanalysis.stories.MarkOfEvent,com.plectix.simulator.staticanalysis.stories.storage.MasterInformationAboutWires) -> Code
    96:101:void shiftNumberOfUnresolvedEventsOnWires(boolean,com.plectix.simulator.staticanalysis.stories.storage.MasterInformationAboutWires) -> Code
    104:104:com.plectix.simulator.staticanalysis.stories.MarkOfEvent getMark() -> Code
    109:112:com.plectix.simulator.staticanalysis.stories.storage.AtomicEvent getAtomicEvent(int) -> Code
    117:121:int getAtomicEventCount() -> Code
    126:152:com.plectix.simulator.staticanalysis.stories.TypeOfWire getAtomicEventType(int) -> Code
    156:161:com.plectix.simulator.staticanalysis.stories.storage.WireHashKey getWireKey(int) -> Code
    166:171:java.util.Iterator wireEventIterator() -> Code
    175:175:boolean containsWire(com.plectix.simulator.staticanalysis.stories.storage.WireHashKey) -> Code
    180:185:com.plectix.simulator.staticanalysis.stories.storage.AtomicEvent getAtomicEvent(com.plectix.simulator.staticanalysis.stories.storage.WireHashKey) -> Code
    189:191:void removeWire(com.plectix.simulator.staticanalysis.stories.storage.WireHashKey) -> Code
    202:217:com.plectix.simulator.staticanalysis.stories.storage.WireHashKey getWireWithMinimumUresolvedEvent(com.plectix.simulator.staticanalysis.stories.storage.MasterInformationAboutWires) -> Code
    223:225:void setMarkUnresolved(com.plectix.simulator.staticanalysis.stories.storage.MasterInformationAboutWires) -> Code
    228:232:void addToFilter(com.plectix.simulator.staticanalysis.stories.storage.WireHashKey) -> V
    236:238:void onlySetMark$5a7b2e10() -> Code
    245:301:java.util.List exchangeWires(java.util.Map,com.plectix.simulator.staticanalysis.stories.storage.MasterInformationAboutWires) -> Code
    307:313:java.lang.String toString() -> toString
com.plectix.simulator.staticanalysis.stories.storage.Event$1 -> com.PRN$1:
    int[] $SwitchMap$com$plectix$simulator$staticanalysis$stories$TypeOfWire -> Code
com.plectix.simulator.staticanalysis.stories.storage.EventBuilder -> com.lpT1:
    com.plectix.simulator.staticanalysis.stories.storage.StoriesAgentTypesStorage typeById -> Code
    com.plectix.simulator.staticanalysis.stories.storage.Event event -> Code
    22:36:void addAtomicEvent(com.plectix.simulator.staticanalysis.stories.storage.WireHashKey,com.plectix.simulator.staticanalysis.Site,com.plectix.simulator.staticanalysis.stories.ActionOfAEvent,boolean) -> Code
    111:138:void addToEvent(com.plectix.simulator.staticanalysis.Agent,com.plectix.simulator.staticanalysis.stories.ActionOfAEvent,com.plectix.simulator.staticanalysis.Agent) -> Code
    141:159:void addSiteToEvent(com.plectix.simulator.staticanalysis.Site) -> Code
    162:173:void boundAddToEventContainer$481cde6b(com.plectix.simulator.staticanalysis.Site) -> V
    176:187:void breakAddToEvent(com.plectix.simulator.staticanalysis.Site,boolean) -> Code
    190:202:void deleteAddToEvent(com.plectix.simulator.staticanalysis.Site,boolean) -> V
    205:230:void deleteAddNonFixedSites(com.plectix.simulator.staticanalysis.Agent) -> Code
    234:240:void modifyAddSite(com.plectix.simulator.staticanalysis.Site,boolean) -> I
    244:245:void registerAgent(com.plectix.simulator.staticanalysis.Agent) -> V
    249:249:com.plectix.simulator.staticanalysis.stories.storage.Event getEvent() -> Code
    253:255:void setNewEvent(long,int) -> Code
    258:259:void setTypeById(com.plectix.simulator.staticanalysis.stories.storage.StoriesAgentTypesStorage) -> Code
com.plectix.simulator.staticanalysis.stories.storage.EventBuilder$1 -> com.lpT1$1:
    int[] $SwitchMap$com$plectix$simulator$staticanalysis$stories$TypeOfWire -> Code
com.plectix.simulator.staticanalysis.stories.storage.EventInterface -> com.coM2:
    long getStepId() -> Code
    java.util.Iterator wireEventIterator() -> Code
    boolean containsWire(com.plectix.simulator.staticanalysis.stories.storage.WireHashKey) -> Code
    com.plectix.simulator.staticanalysis.stories.storage.AtomicEvent getAtomicEvent(com.plectix.simulator.staticanalysis.stories.storage.WireHashKey) -> Code
    int getAtomicEventCount() -> Code
    com.plectix.simulator.staticanalysis.stories.storage.WireHashKey getWireKey(int) -> Code
    com.plectix.simulator.staticanalysis.stories.storage.AtomicEvent getAtomicEvent(int) -> Code
    com.plectix.simulator.staticanalysis.stories.TypeOfWire getAtomicEventType(int) -> Code
    com.plectix.simulator.staticanalysis.stories.MarkOfEvent getMark() -> Code
    void setMark(com.plectix.simulator.staticanalysis.stories.MarkOfEvent,com.plectix.simulator.staticanalysis.stories.storage.MasterInformationAboutWires) -> Code
    com.plectix.simulator.staticanalysis.stories.storage.WireHashKey getWireWithMinimumUresolvedEvent(com.plectix.simulator.staticanalysis.stories.storage.MasterInformationAboutWires) -> Code
    int getRuleId() -> V
com.plectix.simulator.staticanalysis.stories.storage.EventIteratorInterface -> com.U:
    java.util.TreeMap wire -> Code
    long currentKey -> Code
    boolean timeReverse -> Code
    boolean isFirst -> V
    25:25:com.plectix.simulator.staticanalysis.stories.storage.Event value() -> Code
    29:35:boolean hasNext() -> hasNext
    61:61:void remove() -> remove
    5:5:java.lang.Object next() -> next
com.plectix.simulator.staticanalysis.stories.storage.IteratorAtomicEventWithinEvent -> com.aC:
    java.util.List listOfEvent -> Code
    java.util.List listOfWires -> V
    int value -> Code
    int size -> V
    28:28:boolean hasNext() -> hasNext
    45:45:void remove() -> remove
    8:8:java.lang.Object next() -> next
com.plectix.simulator.staticanalysis.stories.storage.MasterInformationAboutWires -> com.LPT6:
    java.util.LinkedHashMap internalStatesByWire -> Code
    java.util.LinkedHashMap linkStatesByWire -> V
    java.util.LinkedHashMap numberOfUnresolvedEventOnWire -> I
    28:28:java.util.LinkedHashMap getInternalStatesByWire() -> Code
    37:37:java.util.LinkedHashMap getLinkStatesByWire() -> V
    46:46:java.util.LinkedHashMap getNumberOfUnresolvedEventOnWire() -> I
    97:118:void updateWires(java.util.Set,java.util.Map) -> Code
    139:143:int getUnresolvedModifyCount(com.plectix.simulator.staticanalysis.stories.storage.WireHashKey) -> Code
    149:162:void upNumberOfUnresolvedModifyEvent(com.plectix.simulator.staticanalysis.stories.storage.WireHashKey,boolean) -> Code
    166:168:void putUnresolvedModifyEvent(com.plectix.simulator.staticanalysis.stories.storage.WireHashKey,int) -> Code
    198:201:void removeWire(com.plectix.simulator.staticanalysis.stories.storage.WireHashKey) -> Code
com.plectix.simulator.staticanalysis.stories.storage.MasterInformationAboutWires$1 -> com.LPT6$1:
    int[] $SwitchMap$com$plectix$simulator$staticanalysis$stories$ActionOfAEvent -> Code
com.plectix.simulator.staticanalysis.stories.storage.NullEvent -> com.LPT1:
    15:15:void addAtomicEvent(com.plectix.simulator.staticanalysis.stories.storage.WireHashKey,com.plectix.simulator.staticanalysis.Site,com.plectix.simulator.staticanalysis.stories.ActionOfAEvent,boolean) -> Code
    21:21:void addSiteToEvent(com.plectix.simulator.staticanalysis.Site) -> Code
    28:28:void addToEvent(com.plectix.simulator.staticanalysis.Agent,com.plectix.simulator.staticanalysis.stories.ActionOfAEvent,com.plectix.simulator.staticanalysis.Agent) -> Code
    34:34:void boundAddToEventContainer$481cde6b(com.plectix.simulator.staticanalysis.Site) -> V
    40:40:void breakAddToEvent(com.plectix.simulator.staticanalysis.Site,boolean) -> Code
    47:47:void deleteAddNonFixedSites(com.plectix.simulator.staticanalysis.Agent) -> Code
    53:53:void deleteAddToEvent(com.plectix.simulator.staticanalysis.Site,boolean) -> V
    60:60:void registerAgent(com.plectix.simulator.staticanalysis.Agent) -> V
    68:68:void setTypeById(com.plectix.simulator.staticanalysis.stories.storage.StoriesAgentTypesStorage) -> Code
    74:74:void modifyAddSite(com.plectix.simulator.staticanalysis.Site,boolean) -> I
com.plectix.simulator.staticanalysis.stories.storage.PointRound -> com.LPT7:
    com.plectix.simulator.staticanalysis.stories.storage.WireHashKey wk1 -> Code
    com.plectix.simulator.staticanalysis.stories.storage.WireHashKey wk2 -> V
    long number -> Code
com.plectix.simulator.staticanalysis.stories.storage.StateOfLink -> com.lPt7:
    long agentId -> Code
    java.lang.String siteName -> Code
    21:21:long getAgentId() -> Code
    25:25:java.lang.String getSiteName() -> Code
    29:31:boolean isFree() -> Code
    41:44:boolean equals(java.lang.Object) -> equals
    48:48:int getResult(int,java.lang.Object) -> Code
    53:56:int hashCode() -> hashCode
    62:66:java.lang.String toString() -> toString
com.plectix.simulator.staticanalysis.stories.storage.StoriesAgentTypesStorage -> com.COM2:
    java.util.Map typeOfAgentByIdMap -> Code
    int iteration -> Code
    15:21:void setTypeOfAgent(long,java.lang.String) -> Code
    24:24:java.lang.String getType(int,long) -> Code
    28:31:void resetTypesOfAgents(int) -> Code
    34:35:void setIteration(int) -> V
    38:40:void update(int,java.util.LinkedHashMap) -> Code
com.plectix.simulator.staticanalysis.stories.storage.StoryBuilder -> com.LpT7:
    java.util.LinkedHashMap storageWires -> Code
    boolean endFlag -> Code
    21:34:void addEventContainer(com.plectix.simulator.staticanalysis.stories.storage.Event) -> Code
    37:38:void setFlagTrue() -> Code
    86:94:java.util.LinkedHashMap getModificationAction(com.plectix.simulator.staticanalysis.stories.storage.Event) -> Code
    122:137:void handling(com.plectix.simulator.staticanalysis.stories.storage.Event,java.util.LinkedHashSet) -> Code
com.plectix.simulator.staticanalysis.stories.storage.StoryStorageException -> com.LPt3:
com.plectix.simulator.staticanalysis.stories.storage.SwapRecord -> com.LPt9:
    java.util.List agentsIdsFirstList -> V
    java.util.List agentsIdsSecondList -> I
    long firstEventId -> Code
    boolean swapTop -> Code
    com.plectix.simulator.staticanalysis.stories.storage.Event otherSide -> Code
    java.util.List mapWire -> Code
    21:22:void setAgents1(java.util.List) -> Code
    25:25:java.util.List getAgents1() -> Code
    29:30:void setAgents2(java.util.List) -> V
    33:33:java.util.List getAgents2() -> V
    37:38:void setFirstEventId(java.lang.Long) -> Code
    41:41:long getFirstEventId() -> Code
    45:46:void setSwapTop(boolean) -> Code
    49:49:boolean isSwapTop() -> Code
    53:54:void setOtherSide(com.plectix.simulator.staticanalysis.stories.storage.Event) -> Code
    57:57:com.plectix.simulator.staticanalysis.stories.storage.Event getOtherSide() -> Code
com.plectix.simulator.staticanalysis.stories.storage.WireHashKey -> com.h:
    long agentId -> Code
    java.lang.String siteName -> Code
    com.plectix.simulator.staticanalysis.stories.TypeOfWire typeOfWire -> Code
    36:36:com.plectix.simulator.staticanalysis.stories.TypeOfWire getTypeOfWire() -> Code
    40:40:java.lang.String getSiteName() -> Code
    44:44:long getAgentId() -> Code
    48:51:int getSmallHash() -> Code
    56:63:boolean equals(java.lang.Object) -> equals
    68:72:int hashCode() -> hashCode
    80:80:int getResult(int,java.lang.String) -> Code
    86:92:java.lang.String toString() -> toString
com.plectix.simulator.staticanalysis.stories.storage.WireStorageInterface -> com.Lpt1:
    java.util.LinkedHashMap storageWires -> Code
    java.util.Set events -> Code
    com.plectix.simulator.staticanalysis.stories.storage.MasterInformationAboutWires informationAboutWires -> Code
    com.plectix.simulator.staticanalysis.stories.storage.Event initialEvent -> Code
    com.plectix.simulator.staticanalysis.stories.storage.Event observableEvent -> V
    double averageTime -> Code
    int iteration -> Code
    com.plectix.simulator.staticanalysis.stories.compressions.CompressionPassport passport$1c85c9e8 -> Code
    com.plectix.simulator.staticanalysis.stories.storage.StoriesAgentTypesStorage storiesAgentTypesStorage -> Code
    com.plectix.simulator.staticanalysis.stories.storage.StoryBuilder builder -> Code
    95:98:com.plectix.simulator.staticanalysis.stories.storage.Event initialEvent() -> Code
    102:105:com.plectix.simulator.staticanalysis.stories.storage.Event observableEvent() -> V
    71:80:void markAllUnresolved() -> Code
    84:91:boolean markAllUnresolvedAsDeleted() -> Code
    110:110:com.plectix.simulator.staticanalysis.stories.storage.EventIteratorInterface eventIterator$425d26d0(com.plectix.simulator.staticanalysis.stories.storage.WireHashKey) -> Code
    56:56:com.plectix.simulator.staticanalysis.stories.storage.EventIteratorInterface eventIterator(com.plectix.simulator.staticanalysis.stories.storage.WireHashKey,java.lang.Long,boolean) -> Code
    358:358:com.plectix.simulator.staticanalysis.stories.compressions.CompressionPassport extractPassport() -> Code
    322:353:boolean removeWire(java.util.ArrayList) -> Code
    205:205:boolean isImportantStory() -> V
    197:199:void addEventContainer(com.plectix.simulator.staticanalysis.stories.storage.Event) -> Code
    123:128:void addLastEventContainer(com.plectix.simulator.staticanalysis.stories.storage.Event,double) -> Code
    306:306:java.util.Map getStorageWires() -> Code
    310:310:java.util.Set getEvents() -> Code
    212:214:void clearList() -> V
    369:397:void replaceWireToWire(java.util.Map,java.lang.Long,boolean,java.util.TreeMap) -> Code
    455:455:double getAverageTime() -> Code
    443:452:void markAllNull() -> I
    459:459:int getIteration() -> Code
    463:463:com.plectix.simulator.staticanalysis.stories.storage.StoriesAgentTypesStorage getStoriesAgentTypesStorage() -> Code
    468:470:void updateWires(java.util.Set) -> Code
    474:479:boolean tryToSwap(long,com.plectix.simulator.staticanalysis.stories.storage.WireHashKey) -> Code
    483:483:com.plectix.simulator.staticanalysis.stories.storage.MasterInformationAboutWires getInformationAboutWires() -> Code
    133:192:void addEventContainerAndFullOtherMaps(com.plectix.simulator.staticanalysis.stories.storage.Event) -> V
    234:241:void clearStorage(java.util.LinkedHashSet) -> Code
    244:297:void initialize() -> Z
    300:303:void concordWires() -> B
    402:406:java.util.Set stepIdEventsOnWire(com.plectix.simulator.staticanalysis.stories.storage.WireHashKey,java.lang.Long,boolean) -> Code
    414:440:void correctChanges(java.util.List) -> Code
com.plectix.simulator.staticanalysis.subviews.AllSubViewsOfAllAgentsInterface -> com.au:
    void build(com.plectix.simulator.interfaces.SolutionInterface,java.util.List) -> Code
    java.util.Iterator getAllTypesIdOfAgents() -> Code
    java.util.List getAllSubViewsByType(java.lang.String) -> Code
    java.util.Map getFullMapOfAgents() -> V
    void initDeadRules() -> Code
    java.util.List getRules() -> Code
    java.util.Map getAgentNameToAgent() -> Code
    boolean isEmpty() -> Code
    java.util.Map getSubViews() -> I
com.plectix.simulator.staticanalysis.subviews.MainSubViews -> com.cOM4:
    java.util.Map agentNameToAgent -> Code
    java.util.List abstractRules -> Code
    java.util.LinkedHashSet deadRules -> Code
    41:60:void build(com.plectix.simulator.interfaces.SolutionInterface,java.util.List) -> Code
    63:65:void initBoundRulesAndSubViews() -> V
    68:73:void fillingClasses(java.util.Collection) -> Code
    77:77:java.util.List getAllSubViewsByType(java.lang.String) -> Code
    81:81:java.util.Iterator getAllTypesIdOfAgents() -> Code
    85:85:java.util.Map getAgentNameToAgent() -> Code
    108:117:void fillModelMapOfAgents(java.util.Collection,java.util.List) -> Code
    120:133:void fillModelMapByAgentList(java.util.Collection) -> V
    143:147:void constructAbstractRules(java.util.List) -> Code
    151:156:void constructClasses(java.util.List,java.util.Map) -> V
    161:194:void constructAbstractContactMap(com.plectix.simulator.staticanalysis.influencemap.InfluenceMap) -> Code
    198:208:java.util.LinkedHashSet intersect(com.plectix.simulator.staticanalysis.subviews.WrapperTwoSet,java.util.List) -> Code
    212:212:java.util.Map getFullMapOfAgents() -> V
    216:220:void initDeadRules() -> Code
    223:223:java.util.LinkedHashSet getDeadRules() -> Code
    227:227:java.util.List getRules() -> Code
com.plectix.simulator.staticanalysis.subviews.SubViewClass -> com.s:
    java.lang.String agentName -> Code
    java.util.LinkedHashSet sitesNames -> Code
    java.util.LinkedHashSet rulesId -> V
    17:17:java.lang.String getAgentType() -> Code
    21:21:java.util.LinkedHashSet getSitesNames() -> Code
    25:25:java.util.LinkedHashSet getRulesId() -> V
    29:30:void addSite(java.lang.String) -> Code
    33:33:int hashCode() -> hashCode
    37:37:boolean hasSite(java.lang.String) -> Code
    41:42:void addRuleId(int) -> Code
    45:46:void addRulesId(java.util.LinkedHashSet) -> Code
    50:58:java.lang.String toString() -> toString
    63:71:boolean equals(java.lang.Object) -> equals
com.plectix.simulator.staticanalysis.subviews.WrapperTwoSet -> com.cOM9:
    java.util.LinkedHashSet first -> Code
    java.util.LinkedHashSet second -> V
    12:12:java.util.LinkedHashSet getFirst() -> Code
    16:17:void firstSetAddAll(java.util.Set) -> Code
    20:21:void secondSetAddAll(java.util.Set) -> V
    24:24:java.util.LinkedHashSet getSecond() -> V
    29:29:boolean isEmpty() -> Code
com.plectix.simulator.staticanalysis.subviews.base.AbstractAction -> com.PrN:
    com.plectix.simulator.staticanalysis.abstracting.AbstractAgent leftHandSideAgent -> Code
    com.plectix.simulator.staticanalysis.abstracting.AbstractAgent rightHandSideAgent -> V
    java.util.List testedSites -> Code
    java.util.List modificatedSites -> V
    java.util.List subViewsList -> I
    java.util.List sitesSideEffect -> Z
    java.util.List sideEffect -> B
    com.plectix.simulator.staticanalysis.subviews.base.AbstractActionType actionType -> Code
    boolean applicable -> Code
    34:66:void init() -> I
    83:85:void clearSitesSideEffect() -> Code
    88:91:void addSiteSideEffect(com.plectix.simulator.staticanalysis.abstracting.AbstractSite) -> Code
    94:95:void addSubViews(com.plectix.simulator.staticanalysis.subviews.storage.SubViewsInterface) -> Code
    98:98:java.util.List getSubViews() -> Code
    102:102:java.util.List getTestedSites() -> V
    106:106:java.util.List getModificatedSites() -> I
    110:110:com.plectix.simulator.staticanalysis.abstracting.AbstractAgent getLeftHandSideAgent() -> Code
    114:114:com.plectix.simulator.staticanalysis.abstracting.AbstractAgent getRightHandSideAgent() -> V
    118:118:java.util.List getSitesSideEffect() -> Z
    122:122:com.plectix.simulator.staticanalysis.subviews.base.AbstractActionType getActionType() -> Code
    126:126:java.util.List getSideEffect() -> B
    130:130:boolean canApply() -> Code
    134:135:void setApplicable() -> V
    138:164:void initSubViews(java.util.Map) -> Code
    18:30:boolean isClash(java.util.List) -> Code
com.plectix.simulator.staticanalysis.subviews.base.AbstractActionType -> com.N:
    com.plectix.simulator.staticanalysis.subviews.base.AbstractActionType TEST_ONLY -> Code
    com.plectix.simulator.staticanalysis.subviews.base.AbstractActionType DELETE -> V
    com.plectix.simulator.staticanalysis.subviews.base.AbstractActionType ADD -> I
    com.plectix.simulator.staticanalysis.subviews.base.AbstractActionType TEST_AND_MODIFICATION -> Z
    com.plectix.simulator.staticanalysis.subviews.base.AbstractActionType[] $VALUES -> Code
    3:3:com.plectix.simulator.staticanalysis.subviews.base.AbstractActionType[] values() -> values
    3:3:com.plectix.simulator.staticanalysis.subviews.base.AbstractActionType valueOf(java.lang.String) -> valueOf
com.plectix.simulator.staticanalysis.subviews.base.AbstractClassSubViewBuilder -> com.Z:
    java.util.Map subViewsMap -> Code
    27:27:java.util.Map getSubViews() -> I
    35:124:void constructClassesSubViews(java.util.List,java.util.Map) -> Code
    129:141:void fillingSubViewsMap(java.util.Map) -> Code
    144:151:boolean isEmpty() -> Code
com.plectix.simulator.staticanalysis.subviews.base.AbstractionRule -> com.lpt2:
    java.util.List actions -> Code
    int ruleId -> Code
    boolean wasApplied -> Code
    com.plectix.simulator.interfaces.ObservableConnectedComponentInterface observableComponent -> Code
    java.util.List leftHandSideAgents -> V
    java.util.List rightHandSideAgents -> I
    58:60:void initActionsToSubViews(java.util.Map) -> Code
    66:109:com.plectix.simulator.staticanalysis.subviews.WrapperTwoSet apply$7fa00c18(java.util.Map) -> Code
    124:140:java.util.List initListAgents(java.util.List) -> Code
    149:180:void initAtomicActions(java.util.List,java.util.List) -> Code
    202:203:void addAgentToAdd(com.plectix.simulator.staticanalysis.abstracting.AbstractAgent) -> Code
    213:214:void addAgentToDelete(com.plectix.simulator.staticanalysis.abstracting.AbstractAgent) -> V
    244:244:java.util.List getActions() -> Code
    248:248:int getRuleId() -> Code
    252:252:boolean isApply() -> Code
    256:256:com.plectix.simulator.interfaces.ObservableConnectedComponentInterface getObservableComponent() -> Code
    260:264:java.util.List getLeftHandSideActions() -> V
    273:299:java.util.Collection getFocusedAgents() -> Code
    308:308:java.util.List getLeftHandSideAgents() -> I
    317:317:java.util.List getRightHandSideAgents() -> Z
com.plectix.simulator.staticanalysis.subviews.storage.SubViewsExeption -> com.cOm2:
com.plectix.simulator.staticanalysis.subviews.storage.SubViewsInterface -> com.lPT5:
    java.util.List getAllSubViews() -> Code
    java.util.List getAllSubViewsCoherent(com.plectix.simulator.staticanalysis.abstracting.AbstractAgent) -> Code
    boolean test(com.plectix.simulator.staticanalysis.subviews.base.AbstractAction) -> Code
    boolean burnRule(com.plectix.simulator.staticanalysis.subviews.base.AbstractAction) -> V
    void fillingInitialState(java.util.Map,java.util.Collection) -> Code
    boolean isAgentFit(com.plectix.simulator.staticanalysis.abstracting.AbstractAgent) -> Code
    boolean burnBreakAllNeedLinkState(com.plectix.simulator.staticanalysis.subviews.base.AbstractAction) -> I
    com.plectix.simulator.staticanalysis.subviews.SubViewClass getSubViewClass() -> Code
    boolean isEmpty() -> Code
com.plectix.simulator.staticanalysis.subviews.storage.SubViewsLinkedlist -> com.LPt5:
    com.plectix.simulator.staticanalysis.subviews.SubViewClass subViewClass -> Code
    java.util.List storage -> Code
    32:48:void fillingInitialState(java.util.Map,java.util.Collection) -> Code
    52:58:boolean addAbstractAgent(com.plectix.simulator.staticanalysis.abstracting.AbstractAgent) -> V
    62:90:boolean burnRule(com.plectix.simulator.staticanalysis.subviews.base.AbstractAction) -> V
    108:128:void initBreakingSites(com.plectix.simulator.staticanalysis.subviews.base.AbstractAction,java.util.List) -> Code
    132:145:void initSideEffectSite(com.plectix.simulator.staticanalysis.abstracting.AbstractSite,com.plectix.simulator.staticanalysis.abstracting.AbstractAgent,java.util.Map,com.plectix.simulator.staticanalysis.subviews.base.AbstractAction) -> Code
    189:192:boolean test(com.plectix.simulator.staticanalysis.subviews.base.AbstractAction) -> Code
    196:225:boolean test(com.plectix.simulator.staticanalysis.abstracting.AbstractAgent) -> I
    229:229:java.util.List getAllSubViews() -> Code
    261:270:java.util.List convertAgentsToAbstract(java.util.List,com.plectix.simulator.staticanalysis.abstracting.AbstractAgent) -> Code
    282:285:boolean isAgentFit(com.plectix.simulator.staticanalysis.abstracting.AbstractAgent) -> Code
    289:295:boolean equals(java.lang.Object) -> equals
    299:299:int hashCode() -> hashCode
    303:303:java.lang.String toString() -> toString
    307:336:boolean burnBreakAllNeedLinkState(com.plectix.simulator.staticanalysis.subviews.base.AbstractAction) -> I
    340:340:com.plectix.simulator.staticanalysis.subviews.SubViewClass getSubViewClass() -> Code
    344:360:java.util.List getAllSubViewsCoherent(com.plectix.simulator.staticanalysis.abstracting.AbstractAgent) -> Code
    365:365:boolean isEmpty() -> Code
com.plectix.simulator.staticanalysis.subviews.storage.SubViewsLinkedlist$1 -> com.LPt5$1:
    int[] $SwitchMap$com$plectix$simulator$staticanalysis$subviews$base$AbstractActionType -> Code
com.plectix.simulator.streaming.AbstractLiveDataConsumer -> com.X:
    com.plectix.simulator.streaming.LiveDataSourceInterface liveDataSource -> Code
    java.util.Collection rawDataPoints -> Code
    java.util.Collection processedDataPoints -> V
    java.util.concurrent.locks.Lock processedDatalock -> Code
    java.util.concurrent.locks.Lock rawDataLock -> V
    24:33:void addDataPoint(long,double) -> addDataPoint
    44:56:void consumeLiveData() -> consumeLiveData
    java.util.Collection processRawDataPoints(java.util.Collection) -> Code
    68:75:com.plectix.simulator.streaming.LiveData getConsumedLiveData() -> getConsumedLiveData
com.plectix.simulator.streaming.DensityDependantLiveDataConsumer -> com.DDLDC:
    java.util.Collection allDataPoints -> Code
    int pointsLimit -> Code
    20:24:java.util.Collection processRawDataPoints(java.util.Collection) -> Code
    38:48:java.util.Collection removeNumberOfPoints(java.util.Collection,int) -> Code
com.plectix.simulator.streaming.LiveData -> com.LD:
    java.lang.String[] plotNames -> Code
    com.plectix.simulator.streaming.LiveData$PlotType[] plotTypes -> Code
    java.util.Collection compressedData -> Code
    35:38:int getNumberOfPlots() -> gNOP
    42:42:java.util.Collection getData() -> gD
    46:46:java.lang.String[] getPlotNames() -> gPN
    50:50:com.plectix.simulator.streaming.LiveData$PlotType[] getPlotTypes() -> gPT
com.plectix.simulator.streaming.LiveData$PlotType -> com.LD$PT:
    java.lang.String getName() -> gN
com.plectix.simulator.streaming.LiveDataConsumerInterface -> com.lpT8:
    void consumeLiveData() -> consumeLiveData
    com.plectix.simulator.streaming.LiveData getConsumedLiveData() -> getConsumedLiveData
    void addDataPoint(long,double) -> addDataPoint
com.plectix.simulator.streaming.LiveDataPoint -> com.LDP:
    long eventNumber -> Code
    double eventTime -> Code
    double[] plotValues -> Code
    17:17:long getEventNumber() -> gEN
    21:21:double getEventTime() -> gET
    25:25:double[] getPlotValues() -> gPV
    30:30:java.lang.String toString() -> toString
com.plectix.simulator.streaming.LiveDataSourceInterface -> com.f:
    double[] getPlotValues() -> Code
    java.lang.String[] getPlotNames() -> Code
    com.plectix.simulator.streaming.LiveData$PlotType[] getPlotTypes() -> Code
com.plectix.simulator.streaming.LiveDataStreamer -> com.lPT4:
    com.plectix.simulator.streaming.LiveDataConsumerInterface DUMMY_LIVE_DATA_CONSUMER -> Code
    com.plectix.simulator.util.io.PlxLogger LOGGER -> Code
    java.util.concurrent.ScheduledExecutorService TIMER -> Code
    int liveDataInterval -> Code
    com.plectix.simulator.streaming.LiveDataConsumerInterface consumer -> V
    java.util.concurrent.ScheduledFuture consumeTaskFuture -> Code
    java.lang.Runnable consumeTask -> Code
    62:68:void addNewDataPoint(long,double) -> Code
    83:83:com.plectix.simulator.streaming.LiveData getLiveData() -> Code
    96:122:void reset(int,int,java.lang.String,com.plectix.simulator.streaming.LiveDataSourceInterface) -> Code
    125:130:void stop() -> Code
    11:11:com.plectix.simulator.streaming.LiveDataConsumerInterface access$000(com.plectix.simulator.streaming.LiveDataStreamer) -> Code
com.plectix.simulator.streaming.LiveDataStreamer$1 -> com.NUl:
    17:17:void addDataPoint(long,double) -> addDataPoint
    21:21:void consumeLiveData() -> consumeLiveData
    25:25:com.plectix.simulator.streaming.LiveData getConsumedLiveData() -> getConsumedLiveData
com.plectix.simulator.streaming.LiveDataStreamer$2 -> com.nUl:
    com.plectix.simulator.streaming.LiveDataStreamer this$0 -> Code
    40:41:void run() -> run
com.plectix.simulator.streaming.SegmentCovering -> com.J:
    java.util.TreeMap covering -> Code
    65:84:com.plectix.simulator.streaming.SegmentCovering getCovering(java.util.Collection) -> Code
    100:120:com.plectix.simulator.streaming.LiveDataPoint pop() -> Code
com.plectix.simulator.streaming.SegmentCovering$Segment -> com.J$aux:
    com.plectix.simulator.streaming.LiveDataPoint firstPoint -> Code
    com.plectix.simulator.streaming.LiveDataPoint secondPoint -> V
    double length -> Code
    37:37:boolean equals(java.lang.Object) -> equals
    41:41:java.lang.String toString() -> toString
    45:48:void replaceDataWith(com.plectix.simulator.streaming.SegmentCovering$Segment) -> Code
    12:12:int compareTo(java.lang.Object) -> compareTo
    12:12:double access$000(com.plectix.simulator.streaming.SegmentCovering$Segment) -> Code
    12:12:com.plectix.simulator.streaming.LiveDataPoint access$100(com.plectix.simulator.streaming.SegmentCovering$Segment) -> Code
    12:12:com.plectix.simulator.streaming.LiveDataPoint access$200(com.plectix.simulator.streaming.SegmentCovering$Segment) -> V
com.plectix.simulator.util.BoundContactMap -> com.lpt8:
    java.lang.String sourceAgentName -> Code
    java.lang.String targetAgentName -> V
    java.lang.String sourceSiteName -> I
    java.lang.String targetSiteName -> Z
    32:37:boolean includedInCollection(java.util.List) -> Code
com.plectix.simulator.util.IdGenerator -> com.lPt2:
    long id -> Code
    7:7:long generateNext() -> Code
    11:12:void reset() -> Code
com.plectix.simulator.util.InequalitySign -> com.LpT8:
    com.plectix.simulator.util.InequalitySign LESS -> Code
    com.plectix.simulator.util.InequalitySign GREATER -> V
    java.lang.String string -> Code
    com.plectix.simulator.util.InequalitySign[] $VALUES -> Code
    3:3:com.plectix.simulator.util.InequalitySign[] values() -> values
    3:3:com.plectix.simulator.util.InequalitySign valueOf(java.lang.String) -> valueOf
    14:17:boolean satisfy(double,double) -> Code
    23:23:java.lang.String toString() -> toString
com.plectix.simulator.util.Info -> com.lPT1:
    int count -> Code
    boolean haveTime -> Code
    java.lang.String message -> Code
    double position -> Code
    double time -> V
    com.plectix.simulator.util.Info$InfoType type -> Code
    47:47:java.lang.String getCount() -> Code
    51:54:java.lang.String getMessageWithTime() -> V
    58:58:java.lang.String getMessageWithoutTime() -> I
    62:64:java.lang.String getPosition() -> Z
    68:68:double getTime() -> Code
    72:72:com.plectix.simulator.util.Info$InfoType getType() -> Code
    76:78:void upCount(double) -> Code
com.plectix.simulator.util.Info$1 -> com.lPT1$1:
    int[] $SwitchMap$com$plectix$simulator$util$Info$InfoType -> Code
com.plectix.simulator.util.Info$InfoType -> com.lPT1$aux:
    com.plectix.simulator.util.Info$InfoType INFO -> Code
    com.plectix.simulator.util.Info$InfoType INTERNAL -> V
    com.plectix.simulator.util.Info$InfoType WARNING -> B
    com.plectix.simulator.util.Info$InfoType OUTPUT -> I
    com.plectix.simulator.util.Info$InfoType DO_NOT_OUTPUT -> Z
    com.plectix.simulator.util.Info$InfoType[] $VALUES -> Code
    7:7:com.plectix.simulator.util.Info$InfoType[] values() -> values
    7:7:com.plectix.simulator.util.Info$InfoType valueOf(java.lang.String) -> valueOf
com.plectix.simulator.util.MemoryUtil -> com.coM3:
    com.plectix.simulator.util.MemoryUtil$PeakMemoryUsage peakMemoryUsage -> Code
    22:28:boolean monitorPeakMemoryUsage(long) -> Code
    44:52:com.plectix.simulator.util.MemoryUtil$PeakMemoryUsage getPeakMemoryUsage() -> Code
    9:9:com.plectix.simulator.util.MemoryUtil$PeakMemoryUsage access$000() -> V
com.plectix.simulator.util.MemoryUtil$PeakMemoryUsage -> com.coM3$aux:
    long heap -> Code
    long nonHeap -> V
    long total -> I
    java.lang.management.MemoryMXBean mbean -> Code
    java.util.Timer peakMemoryTimer -> Code
    99:105:boolean stopTimer() -> Code
    109:115:void update() -> Code
    120:120:java.lang.String toString() -> toString
com.plectix.simulator.util.MemoryUtil$PeakMemoryUsage$1 -> com.al:
    91:94:void run() -> run
com.plectix.simulator.util.NameDictionary -> com.Prn:
com.plectix.simulator.util.ObservableState -> com.CoM2:
    byte NO_VALUE -> Code
    double time -> Code
    long event -> Code
    20:20:double getTime() -> Code
    24:24:long getEvent() -> Code
com.plectix.simulator.util.OutputUtils -> com.cOM8:
    com.plectix.simulator.simulationclasses.solution.SuperSubstance superSubstance -> Code
    20:37:java.lang.String printPartRule(java.util.List,boolean) -> Code
    42:109:java.lang.String printPartRule$4ce9e2f1(com.plectix.simulator.interfaces.SolutionElementInterface,int[],boolean) -> Code
    113:121:java.lang.String prepareSiteDescription(java.util.List) -> Code
    134:159:java.lang.String perturbationToString$9b7f9d6(com.plectix.simulator.simulationclasses.perturbations.ComplexPerturbation) -> Code
    17:24:void process$3f123ca5(com.plectix.simulator.interfaces.SolutionElementInterface,com.plectix.simulator.staticanalysis.Agent) -> Code
com.plectix.simulator.util.OutputUtils$1 -> com.cOM8$1:
    int[] $SwitchMap$com$plectix$simulator$staticanalysis$LinkStatus -> Code
    int[] $SwitchMap$com$plectix$simulator$parser$abstractmodel$perturbations$conditions$ConditionType -> V
com.plectix.simulator.util.PlxTimer -> com.x:
    long timeStart -> Code
    double wallClockTimeInSeconds -> Code
    long timeStartThread -> V
    double threadTimeInSeconds -> V
    boolean running -> Code
    22:25:void startTimer() -> Code
    28:30:void stopTimer() -> V
    33:36:java.lang.String getTimeMessage() -> Code
    47:50:double getThreadTimeInSeconds() -> Code
    54:56:void updateTimes() -> I
com.plectix.simulator.util.PrimeNumbers -> com.LPT5:
    int[] FIRST_8242 -> Code
com.plectix.simulator.util.io.PlxLogger -> com.aJ:
    org.apache.log4j.Logger logger -> Code
    23:24:void debug(java.lang.Object) -> Code
    27:28:void error(java.lang.Object,java.lang.Throwable) -> Code
    35:36:void fatal(java.lang.Object,java.lang.Throwable) -> V
    47:48:void info(java.lang.Object) -> V
    51:51:boolean isDebugEnabled() -> Code
com.plectix.simulator.util.string.AgentInvariant -> com.Con:
    com.plectix.simulator.util.string.AgentInvariant$AgentInvariantComparator AGENT_INVARIANT_COMPARATOR -> Code
    com.plectix.simulator.util.string.AgentInvariant$AgentInvariantRankComparator AGENT_INVARIANT_RANK_COMPARATOR -> Code
    com.plectix.simulator.util.string.AgentInvariant$AgentInvariantNeighborSiteComparator AGENT_INVARIANT_NEIGHBOR_SITE_COMPARATOR -> Code
    int rankOld -> Code
    int rankNew -> V
    int rankTemp -> I
    long productOfNeighborPrimes -> Code
    int numberOfConnections -> Z
    int numberOfWildcards -> B
    com.plectix.simulator.staticanalysis.Agent agent -> Code
    java.util.List sortedSites -> Code
    java.util.List neighborAgentList -> V
    61:66:java.util.List getSortedSites() -> Code
    75:94:void computeNeighbors(java.util.Map) -> Code
    100:108:void computeProductOfNeighborPrimes() -> Code
    128:129:void saveRank() -> V
    137:137:boolean areRanksEqual() -> Code
    144:145:void doubleRankNew() -> I
    153:153:int getNumberOfSites() -> Code
    162:162:java.lang.String getName() -> Code
    171:171:com.plectix.simulator.staticanalysis.Agent getAgent() -> Code
    180:180:long getProductOfNeighborPrimes() -> Code
    189:189:int getRankNew() -> V
    198:199:void setRankNew(int) -> Code
    207:207:int getRankTemp() -> I
    216:217:void setRankTemp(int) -> V
    225:225:int getNumberOfConnections() -> Z
    234:234:int getNumberOfWildcards() -> B
    17:17:java.util.List access$300(com.plectix.simulator.util.string.AgentInvariant) -> Code
    17:17:com.plectix.simulator.staticanalysis.Site access$400(com.plectix.simulator.util.string.AgentInvariant,com.plectix.simulator.util.string.AgentInvariant) -> Code
com.plectix.simulator.util.string.AgentInvariant$AgentInvariantComparator -> com.Con$Aux:
    270:270:int compare(java.lang.Object,java.lang.Object) -> compare
com.plectix.simulator.util.string.AgentInvariant$AgentInvariantNeighborSiteComparator -> com.Con$aux:
    359:359:int compare(java.lang.Object,java.lang.Object) -> compare
com.plectix.simulator.util.string.AgentInvariant$AgentInvariantRankComparator -> com.Con$aUx:
    350:355:int compare(com.plectix.simulator.util.string.AgentInvariant,com.plectix.simulator.util.string.AgentInvariant) -> Code
    344:344:int compare(java.lang.Object,java.lang.Object) -> compare
com.plectix.simulator.util.string.ConnectedComponentToSmilesString -> com.con:
    com.plectix.simulator.util.io.PlxLogger LOGGER -> Code
    112:188:java.lang.String toUniqueString$3adfa875(com.plectix.simulator.interfaces.SolutionElementInterface) -> Code
    195:262:java.lang.String toKappa(java.util.List) -> Code
    271:325:void breakTies(java.util.List) -> Code
    328:331:void saveRanks(java.util.List) -> V
    334:338:java.lang.String getRanksAsString(java.util.List) -> V
    349:373:boolean sortAndComputeRanks(java.util.List,java.util.Comparator) -> Code
    377:385:void computeNeighbors(java.util.List) -> I
com.plectix.simulator.util.string.SiteComparator -> com.CoM7:
    com.plectix.simulator.util.string.SiteComparator SITE_COMPARATOR -> Code
    36:97:int compare(com.plectix.simulator.staticanalysis.Site,com.plectix.simulator.staticanalysis.Site) -> Code
    106:117:com.plectix.simulator.staticanalysis.Site getLinkSite(com.plectix.simulator.staticanalysis.Site) -> Code
    23:23:int compare(java.lang.Object,java.lang.Object) -> compare
